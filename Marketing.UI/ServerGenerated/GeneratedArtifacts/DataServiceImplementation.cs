//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::MarketingData.Implementation.MarketingDataObjectContext>
    {
    
        public MarketingDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region CraigslistPost
    
        public void InsertCraigslistPost(global::MarketingData.Implementation.CraigslistPost entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CraigslistPosts.AddObject(entity);
            }
        }
    
        public void UpdateCraigslistPost(global::MarketingData.Implementation.CraigslistPost currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CraigslistPosts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCraigslistPost(global::MarketingData.Implementation.CraigslistPost entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CraigslistPosts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CraigsListResponse
    
        public void InsertCraigsListResponse(global::MarketingData.Implementation.CraigsListResponse entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CraigsListResponses.AddObject(entity);
            }
        }
    
        public void UpdateCraigsListResponse(global::MarketingData.Implementation.CraigsListResponse currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CraigsListResponses, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCraigsListResponse(global::MarketingData.Implementation.CraigsListResponse entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CraigsListResponses.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CraigslistCity
    
        public void InsertCraigslistCity(global::MarketingData.Implementation.CraigslistCity entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CraigslistCities.AddObject(entity);
            }
        }
    
        public void UpdateCraigslistCity(global::MarketingData.Implementation.CraigslistCity currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CraigslistCities, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCraigslistCity(global::MarketingData.Implementation.CraigslistCity entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CraigslistCities.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Keyword
    
        public void InsertKeyword(global::MarketingData.Implementation.Keyword entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Keywords.AddObject(entity);
            }
        }
    
        public void UpdateKeyword(global::MarketingData.Implementation.Keyword currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Keywords, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteKeyword(global::MarketingData.Implementation.Keyword entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Keywords.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region CraigslistPostKeyword
    
        public void InsertCraigslistPostKeyword(global::MarketingData.Implementation.CraigslistPostKeyword entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.CraigslistPostKeywords.AddObject(entity);
            }
        }
    
        public void UpdateCraigslistPostKeyword(global::MarketingData.Implementation.CraigslistPostKeyword currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.CraigslistPostKeywords, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCraigslistPostKeyword(global::MarketingData.Implementation.CraigslistPostKeyword entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.CraigslistPostKeywords.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> CraigslistPosts_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistPost>("CraigslistPosts_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> CraigslistPosts_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistPost>("CraigslistPosts_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> CraigslistPosts_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistPost>("CraigslistPosts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> CraigsListResponses_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigsListResponse>("CraigsListResponses_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> CraigsListResponses_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigsListResponse>("CraigsListResponses_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> CraigsListResponses_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigsListResponse>("CraigsListResponses_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> CraigslistCities_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistCity>("CraigslistCities_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> CraigslistCities_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistCity>("CraigslistCities_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> CraigslistCities_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistCity>("CraigslistCities_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> Keywords_Single(string frameworkOperators, string KeywordValue)
        {
            return this.GetQuery<global::MarketingData.Implementation.Keyword>("Keywords_Single", frameworkOperators, KeywordValue);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> Keywords_SingleOrDefault(string frameworkOperators, string KeywordValue)
        {
            return this.GetQuery<global::MarketingData.Implementation.Keyword>("Keywords_SingleOrDefault", frameworkOperators, KeywordValue);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> Keywords_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingData.Implementation.Keyword>("Keywords_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> CraigslistPostKeywords_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> CraigslistPostId, global::System.Nullable<global::System.Guid> KeywordId)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistPostKeyword>("CraigslistPostKeywords_Single", frameworkOperators, CraigslistPostId, KeywordId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> CraigslistPostKeywords_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> CraigslistPostId, global::System.Nullable<global::System.Guid> KeywordId)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistPostKeyword>("CraigslistPostKeywords_SingleOrDefault", frameworkOperators, CraigslistPostId, KeywordId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> CraigslistPostKeywords_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingData.Implementation.CraigslistPostKeyword>("CraigslistPostKeywords_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().MarketingData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::MarketingData.Implementation.MarketingDataObjectContext>
    {
        public MarketingDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> CraigslistPosts_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigslistPost>("CraigslistPosts_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> CraigslistPosts_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigslistPost>("CraigslistPosts_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> CraigslistPosts_All()
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPost> query;
            query = base.CreateQuery<global::MarketingData.Implementation.CraigslistPost>("[CraigslistPosts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> CraigsListResponses_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigsListResponse>("CraigsListResponses_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> CraigsListResponses_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigsListResponse>("CraigsListResponses_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> CraigsListResponses_All()
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigsListResponse> query;
            query = base.CreateQuery<global::MarketingData.Implementation.CraigsListResponse>("[CraigsListResponses]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> CraigslistCities_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigslistCity>("CraigslistCities_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> CraigslistCities_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigslistCity>("CraigslistCities_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> CraigslistCities_All()
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistCity> query;
            query = base.CreateQuery<global::MarketingData.Implementation.CraigslistCity>("[CraigslistCities]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> Keywords_Single(string KeywordValue)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.Keyword>("Keywords_All"),
                (k) => (k.KeywordValue.CompareTo(KeywordValue) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> Keywords_SingleOrDefault(string KeywordValue)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.Keyword>("Keywords_All"),
                (k) => (k.KeywordValue.CompareTo(KeywordValue) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> Keywords_All()
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.Keyword> query;
            query = base.CreateQuery<global::MarketingData.Implementation.Keyword>("[Keywords]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> CraigslistPostKeywords_Single(global::System.Nullable<global::System.Guid> CraigslistPostId, global::System.Nullable<global::System.Guid> KeywordId)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigslistPostKeyword>("CraigslistPostKeywords_All"),
                (c) => ((KeywordId.HasValue && (c.KeywordId == KeywordId)) && (CraigslistPostId.HasValue && (c.CraigslistPostId == CraigslistPostId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> CraigslistPostKeywords_SingleOrDefault(global::System.Nullable<global::System.Guid> CraigslistPostId, global::System.Nullable<global::System.Guid> KeywordId)
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingData.Implementation.CraigslistPostKeyword>("CraigslistPostKeywords_All"),
                (c) => ((KeywordId.HasValue && (c.KeywordId == KeywordId)) && (CraigslistPostId.HasValue && (c.CraigslistPostId == CraigslistPostId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> CraigslistPostKeywords_All()
        {
            global::System.Linq.IQueryable<global::MarketingData.Implementation.CraigslistPostKeyword> query;
            query = base.CreateQuery<global::MarketingData.Implementation.CraigslistPostKeyword>("[CraigslistPostKeywords]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::MarketingData.Implementation.CraigslistPost))
            {
                return new global::MarketingData.Implementation.CraigslistPost();
            }
            if (type == typeof(global::MarketingData.Implementation.CraigsListResponse))
            {
                return new global::MarketingData.Implementation.CraigsListResponse();
            }
            if (type == typeof(global::MarketingData.Implementation.CraigslistCity))
            {
                return new global::MarketingData.Implementation.CraigslistCity();
            }
            if (type == typeof(global::MarketingData.Implementation.Keyword))
            {
                return new global::MarketingData.Implementation.Keyword();
            }
            if (type == typeof(global::MarketingData.Implementation.CraigslistPostKeyword))
            {
                return new global::MarketingData.Implementation.CraigslistPostKeyword();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::MarketingData.Implementation.MarketingDataObjectContext CreateObjectContext()
        {
            return new global::MarketingData.Implementation.MarketingDataObjectContext(base.GetEntityConnectionString(
                "MarketingData", 
                "res://*/MarketingData.csdl|res://*/MarketingData.ssdl|res://*/MarketingData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.CraigslistPost))
            {
                return new global::MarketingData.Implementation.CraigslistPost();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CraigsListResponse))
            {
                return new global::MarketingData.Implementation.CraigsListResponse();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CraigslistCity))
            {
                return new global::MarketingData.Implementation.CraigslistCity();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Keyword))
            {
                return new global::MarketingData.Implementation.Keyword();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.CraigslistPostKeyword))
            {
                return new global::MarketingData.Implementation.CraigslistPostKeyword();
            }
            return null;
        }
    
    #endregion
    
    }
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext>
    {
    
        public MarketingDomainServiceDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region Operation
    
        public void InsertOperation(global::MarketingDomainServiceData.Implementation.Operation entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Operations.AddObject(entity);
            }
        }
    
        public void UpdateOperation(global::MarketingDomainServiceData.Implementation.Operation currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Operations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteOperation(global::MarketingDomainServiceData.Implementation.Operation entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Operations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> RunOperation(string frameworkOperators, global::System.Nullable<int> id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("RunOperation", frameworkOperators, id);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().MarketingDomainServiceData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.RiaDataServiceImplementation<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext, global::Marketing.Services.MarketingDomainService>
    {
        public MarketingDomainServiceDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_All"),
                (o) => (Id.HasValue && (o.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_All"),
                (o) => (Id.HasValue && (o.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.Operation>("GetOperations").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> RunOperation(global::System.Nullable<int> id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.Operation>("RunOperation", id).AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::MarketingDomainServiceData.Implementation.Operation))
            {
                return new global::MarketingDomainServiceData.Implementation.Operation();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext CreateObjectContext()
        {
            return new global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext(base.GetEntityConnectionString(
                "MarketingDomainServiceData", 
                "res://*/MarketingDomainServiceData.csdl|res://*/MarketingDomainServiceData.ssdl|res://*/MarketingDomainServiceData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Operation))
            {
                return new global::MarketingDomainServiceData.Implementation.Operation();
            }
            return null;
        }
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.Operation))
            {
                return typeof(global::Marketing.Services.Operation);
            }
            return base.ConvertType(outerType);
        }
        protected override object ConvertEntity(object outerEntity)
        {
            global::MarketingDomainServiceData.Implementation.Operation operation = outerEntity as global::MarketingDomainServiceData.Implementation.Operation;
            if (operation != null)
            {
                global::Marketing.Services.Operation result = new global::Marketing.Services.Operation();
                result.Id = operation.Id;
                result.Created = operation.Created;
                result.OperationName = operation.OperationName;
                return result;
            }
            return null;
        }
       
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::MarketingDomainServiceData.Implementation.Operation outerOperation = outerEntity as global::MarketingDomainServiceData.Implementation.Operation;
            global::Marketing.Services.Operation innerOperation = innerResult as global::Marketing.Services.Operation;
            if ((outerOperation != null) && (innerOperation != null))
            {
                outerOperation.Id = innerOperation.Id;
                outerOperation.Created = innerOperation.Created;
                outerOperation.OperationName = innerOperation.OperationName;
                return;
            }
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.MarketingData))
            {
                return new global::LightSwitchApplication.MarketingDataService();
            }
            if (dataServiceType == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.MarketingDomainServiceDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.MarketingData))
            {
                return new global::LightSwitchApplication.Implementation.MarketingDataServiceImplementation(dataService);
            }
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.Implementation.MarketingDomainServiceDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.CraigslistPost) == definitionType)
            {
                return typeof(global::MarketingData.Implementation.CraigslistPost);
            }
            if (typeof(global::LightSwitchApplication.CraigsListResponse) == definitionType)
            {
                return typeof(global::MarketingData.Implementation.CraigsListResponse);
            }
            if (typeof(global::LightSwitchApplication.CraigslistCity) == definitionType)
            {
                return typeof(global::MarketingData.Implementation.CraigslistCity);
            }
            if (typeof(global::LightSwitchApplication.Keyword) == definitionType)
            {
                return typeof(global::MarketingData.Implementation.Keyword);
            }
            if (typeof(global::LightSwitchApplication.CraigslistPostKeyword) == definitionType)
            {
                return typeof(global::MarketingData.Implementation.CraigslistPostKeyword);
            }
            if (typeof(global::LightSwitchApplication.Operation) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.Operation);
            }
            return null;
        }
    }
}

namespace MarketingData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::MarketingData.Implementation.CraigslistPost.Metadata))]
    public partial class CraigslistPost :
        global::LightSwitchApplication.CraigslistPost.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.CraigslistPost.DetailsClass.IImplementation.CraigsListResponses
        {
            get
            {
                return this.CraigsListResponses;
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.CraigslistPost.DetailsClass.IImplementation.CraigslistPostKeywords
        {
            get
            {
                return this.CraigslistPostKeywords;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CraigslistPost.DetailsClass.IImplementation.CraigslistCity
        {
            get
            {
                return this.CraigslistCity;
            }
            set
            {
                this.CraigslistCity = (global::MarketingData.Implementation.CraigslistCity)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("CraigslistCity");
                }
            }
        }
        
        partial void OnCraigslistCityIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("CraigslistCity");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::MarketingData.Implementation.CraigslistCity CraigslistCity { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::MarketingData.Implementation.CraigsListResponse.Metadata))]
    public partial class CraigsListResponse :
        global::LightSwitchApplication.CraigsListResponse.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CraigsListResponse.DetailsClass.IImplementation.CraigslistPost
        {
            get
            {
                return this.CraigslistPost;
            }
            set
            {
                this.CraigslistPost = (global::MarketingData.Implementation.CraigslistPost)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("CraigslistPost");
                }
            }
        }
        
        partial void OnCraigslitPostsIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("CraigslistPost");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::MarketingData.Implementation.CraigslistPost CraigslistPost { get; set; }
        
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class CraigslistCity :
        global::LightSwitchApplication.CraigslistCity.DetailsClass.IImplementation
    {
    
        global::System.Collections.IEnumerable global::LightSwitchApplication.CraigslistCity.DetailsClass.IImplementation.CraigslistPosts
        {
            get
            {
                return this.CraigslistPosts;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Keyword :
        global::LightSwitchApplication.Keyword.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DataAnnotations.MetadataType(typeof(global::MarketingData.Implementation.CraigslistPostKeyword.Metadata))]
    public partial class CraigslistPostKeyword :
        global::LightSwitchApplication.CraigslistPostKeyword.DetailsClass.IImplementation
    {
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.CraigslistPostKeyword.DetailsClass.IImplementation.CraigslistPost
        {
            get
            {
                return this.CraigslistPost;
            }
            set
            {
                this.CraigslistPost = (global::MarketingData.Implementation.CraigslistPost)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("CraigslistPost");
                }
            }
        }
        
        partial void OnCraigslistPostIdChanged()
        {
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged("CraigslistPost");
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
        
        internal class Metadata
        {
            [global::System.ServiceModel.DomainServices.Server.Include]
            public global::MarketingData.Implementation.CraigslistPost CraigslistPost { get; set; }
        
        }
    }
    
}

namespace MarketingDomainServiceData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Operation :
        global::LightSwitchApplication.Operation.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

