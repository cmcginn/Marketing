//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class Marketing_CraigslistScraperDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext>
    {
    
        public Marketing_CraigslistScraperDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region City
    
        public void InsertCity(global::Marketing_CraigslistScraperData.Implementation.City entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Cities.AddObject(entity);
            }
        }
    
        public void UpdateCity(global::Marketing_CraigslistScraperData.Implementation.City currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Cities, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCity(global::Marketing_CraigslistScraperData.Implementation.City entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Cities.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserCity
    
        public void InsertUserCity(global::Marketing_CraigslistScraperData.Implementation.UserCity entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserCities.AddObject(entity);
            }
        }
    
        public void UpdateUserCity(global::Marketing_CraigslistScraperData.Implementation.UserCity currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserCities, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserCity(global::Marketing_CraigslistScraperData.Implementation.UserCity entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserCities.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region vw_aspnet_MembershipUser
    
        public void Insertvw_aspnet_MembershipUser(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.vw_aspnet_MembershipUsers.AddObject(entity);
            }
        }
    
        public void Updatevw_aspnet_MembershipUser(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.vw_aspnet_MembershipUsers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletevw_aspnet_MembershipUser(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.vw_aspnet_MembershipUsers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_All(string frameworkOperators)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_All(string frameworkOperators)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_Single", frameworkOperators, UserId, PasswordFormat, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, ApplicationId, UserName, IsAnonymous, LastActivityDate);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_SingleOrDefault", frameworkOperators, UserId, PasswordFormat, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, ApplicationId, UserName, IsAnonymous, LastActivityDate);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_All(string frameworkOperators)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().Marketing_CraigslistScraperData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class Marketing_CraigslistScraperDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext>
    {
        public Marketing_CraigslistScraperDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_All()
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> query;
            query = base.CreateQuery<global::Marketing_CraigslistScraperData.Implementation.City>("[Cities]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_All()
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> query;
            query = base.CreateQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("[UserCities]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_Single(global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_All"),
                (v) => ((((((((((((((((LastActivityDate.HasValue && (v.LastActivityDate == LastActivityDate)) && (IsAnonymous.HasValue && (v.IsAnonymous == IsAnonymous))) && (v.UserName.CompareTo(UserName) == 0)) && (ApplicationId.HasValue && (v.ApplicationId == ApplicationId))) && (FailedPasswordAnswerAttemptWindowStart.HasValue && (v.FailedPasswordAnswerAttemptWindowStart == FailedPasswordAnswerAttemptWindowStart))) && (FailedPasswordAnswerAttemptCount.HasValue && (v.FailedPasswordAnswerAttemptCount == FailedPasswordAnswerAttemptCount))) && (FailedPasswordAttemptWindowStart.HasValue && (v.FailedPasswordAttemptWindowStart == FailedPasswordAttemptWindowStart))) && (FailedPasswordAttemptCount.HasValue && (v.FailedPasswordAttemptCount == FailedPasswordAttemptCount))) && (LastLockoutDate.HasValue && (v.LastLockoutDate == LastLockoutDate))) && (LastPasswordChangedDate.HasValue && (v.LastPasswordChangedDate == LastPasswordChangedDate))) && (LastLoginDate.HasValue && (v.LastLoginDate == LastLoginDate))) && (CreateDate.HasValue && (v.CreateDate == CreateDate))) && (IsLockedOut.HasValue && (v.IsLockedOut == IsLockedOut))) && (IsApproved.HasValue && (v.IsApproved == IsApproved))) && (PasswordFormat.HasValue && (v.PasswordFormat == PasswordFormat))) && (UserId.HasValue && (v.UserId == UserId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_SingleOrDefault(global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_All"),
                (v) => ((((((((((((((((LastActivityDate.HasValue && (v.LastActivityDate == LastActivityDate)) && (IsAnonymous.HasValue && (v.IsAnonymous == IsAnonymous))) && (v.UserName.CompareTo(UserName) == 0)) && (ApplicationId.HasValue && (v.ApplicationId == ApplicationId))) && (FailedPasswordAnswerAttemptWindowStart.HasValue && (v.FailedPasswordAnswerAttemptWindowStart == FailedPasswordAnswerAttemptWindowStart))) && (FailedPasswordAnswerAttemptCount.HasValue && (v.FailedPasswordAnswerAttemptCount == FailedPasswordAnswerAttemptCount))) && (FailedPasswordAttemptWindowStart.HasValue && (v.FailedPasswordAttemptWindowStart == FailedPasswordAttemptWindowStart))) && (FailedPasswordAttemptCount.HasValue && (v.FailedPasswordAttemptCount == FailedPasswordAttemptCount))) && (LastLockoutDate.HasValue && (v.LastLockoutDate == LastLockoutDate))) && (LastPasswordChangedDate.HasValue && (v.LastPasswordChangedDate == LastPasswordChangedDate))) && (LastLoginDate.HasValue && (v.LastLoginDate == LastLoginDate))) && (CreateDate.HasValue && (v.CreateDate == CreateDate))) && (IsLockedOut.HasValue && (v.IsLockedOut == IsLockedOut))) && (IsApproved.HasValue && (v.IsApproved == IsApproved))) && (PasswordFormat.HasValue && (v.PasswordFormat == PasswordFormat))) && (UserId.HasValue && (v.UserId == UserId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_All()
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> query;
            query = base.CreateQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("[vw_aspnet_MembershipUsers]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::Marketing_CraigslistScraperData.Implementation.City))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.City();
            }
            if (type == typeof(global::Marketing_CraigslistScraperData.Implementation.UserCity))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.UserCity();
            }
            if (type == typeof(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext CreateObjectContext()
        {
            return new global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext(base.GetEntityConnectionString(
                "Marketing_CraigslistScraperData", 
                "res://*/Marketing_CraigslistScraperData.csdl|res://*/Marketing_CraigslistScraperData.ssdl|res://*/Marketing_CraigslistScraperData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.City))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.City();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserCity))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.UserCity();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.vw_aspnet_MembershipUser))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser();
            }
            return null;
        }
    
    #endregion
    
    }
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext>
    {
    
        public MarketingDomainServiceDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region UserCitySelection
    
        public void InsertUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserCitySelections.AddObject(entity);
            }
        }
    
        public void UpdateUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserCitySelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserCitySelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserListingCategorySelection
    
        public void InsertUserListingCategorySelection(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserListingCategorySelections.AddObject(entity);
            }
        }
    
        public void UpdateUserListingCategorySelection(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserListingCategorySelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserListingCategorySelection(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserListingCategorySelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserKeywordSelection
    
        public void InsertUserKeywordSelection(global::MarketingDomainServiceData.Implementation.UserKeywordSelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserKeywordSelections.AddObject(entity);
            }
        }
    
        public void UpdateUserKeywordSelection(global::MarketingDomainServiceData.Implementation.UserKeywordSelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserKeywordSelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserKeywordSelection(global::MarketingDomainServiceData.Implementation.UserKeywordSelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserKeywordSelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserPreferenceSelection
    
        public void InsertUserPreferenceSelection(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserPreferenceSelections.AddObject(entity);
            }
        }
    
        public void UpdateUserPreferenceSelection(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserPreferenceSelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserPreferenceSelection(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserPreferenceSelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserListingItem
    
        public void InsertUserListingItem(global::MarketingDomainServiceData.Implementation.UserListingItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserListingItems.AddObject(entity);
            }
        }
    
        public void UpdateUserListingItem(global::MarketingDomainServiceData.Implementation.UserListingItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserListingItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserListingItem(global::MarketingDomainServiceData.Implementation.UserListingItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserListingItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserListingResponseItem
    
        public void InsertUserListingResponseItem(global::MarketingDomainServiceData.Implementation.UserListingResponseItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserListingResponseItems.AddObject(entity);
            }
        }
    
        public void UpdateUserListingResponseItem(global::MarketingDomainServiceData.Implementation.UserListingResponseItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserListingResponseItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserListingResponseItem(global::MarketingDomainServiceData.Implementation.UserListingResponseItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserListingResponseItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelections(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("GetUserCitySelections", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> GetUserCategorySelections(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("GetUserCategorySelections", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> GetUserKeywordSelections(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("GetUserKeywordSelections", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> GetUserPreferenceSelectionByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("GetUserPreferenceSelectionByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItems(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetUserListingItems", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItemById(string frameworkOperators, global::System.Nullable<global::System.Guid> id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetUserListingItemById", frameworkOperators, id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> GetUserListingResponseById(string frameworkOperators, global::System.Nullable<global::System.Guid> responseId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("GetUserListingResponseById", frameworkOperators, responseId);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().MarketingDomainServiceData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.RiaDataServiceImplementation<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext, global::Marketing.Services.MarketingDomainService>
    {
        public MarketingDomainServiceDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("DefaultUserCitySelections").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelections(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.OrderBy(
                global::System.Linq.Queryable.Where(
                    this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                    (u) => ((userId.HasValue && (u.UserId == userId)) || (u.UserId == new global::System.Guid("00000000-0000-0000-0000-000000000000")))),
                (u) => u.CityName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("DefualtUserListingSelection").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> GetUserCategorySelections(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = global::System.Linq.Queryable.ThenBy(
                global::System.Linq.Queryable.OrderBy(
                    global::System.Linq.Queryable.Where(
                        this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All"),
                        (u) => ((userId.HasValue && (u.UserId == userId)) || (u.UserId == new global::System.Guid("00000000-0000-0000-0000-000000000000")))),
                    (u) => u.GroupName),
                (u) => u.CategoryName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("DefaultUserKeywords").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> GetUserKeywordSelections(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = global::System.Linq.Queryable.OrderBy(
                global::System.Linq.Queryable.Where(
                    this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All"),
                    (u) => (userId.HasValue && (u.UserId == userId))),
                (u) => u.Keyword);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> GetUserPreferenceSelectionByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("GetUserPreferenceSelectionByUserId", userId).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("DefaultUserPreferenceSelections").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("DefaultUserListingItems").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItems(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = global::System.Linq.Queryable.ThenBy(
                global::System.Linq.Queryable.ThenBy(
                    global::System.Linq.Queryable.ThenBy(
                        global::System.Linq.Queryable.ThenBy(
                            global::System.Linq.Queryable.OrderBy(
                                global::System.Linq.Queryable.Where(
                                    this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All"),
                                    (u) => (userId.HasValue && (u.UserId == userId))),
                                (u) => u.Created),
                            (u) => u.RegionName),
                        (u) => u.CityName),
                    (u) => u.GroupName),
                (u) => u.CategoryName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItemById(global::System.Nullable<global::System.Guid> id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetUserListingItemById", id).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("DefaultUserListingResponseItems").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> GetUserListingResponseById(global::System.Nullable<global::System.Guid> responseId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All"),
                (u) => ((responseId.HasValue && (u.Id == responseId)) || (u.Id == new global::System.Guid("00000000-0000-0000-0000-000000000000"))));
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserCitySelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingCategorySelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserKeywordSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserKeywordSelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserPreferenceSelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserListingItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingItem();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserListingResponseItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingResponseItem();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext CreateObjectContext()
        {
            return new global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext(base.GetEntityConnectionString(
                "MarketingDomainServiceData", 
                "res://*/MarketingDomainServiceData.csdl|res://*/MarketingDomainServiceData.ssdl|res://*/MarketingDomainServiceData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.UserCitySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserCitySelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserListingCategorySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingCategorySelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserKeywordSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserKeywordSelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserPreferenceSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserPreferenceSelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserListingItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingItem();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserListingResponseItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingResponseItem();
            }
            return null;
        }
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection))
            {
                return typeof(global::Marketing.Services.UserCitySelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection))
            {
                return typeof(global::Marketing.Services.UserListingCategorySelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserKeywordSelection))
            {
                return typeof(global::Marketing.Services.UserKeywordSelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection))
            {
                return typeof(global::Marketing.Services.UserPreferenceSelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserListingItem))
            {
                return typeof(global::Marketing.Services.UserListingItem);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserListingResponseItem))
            {
                return typeof(global::Marketing.Services.UserListingResponseItem);
            }
            return base.ConvertType(outerType);
        }
        protected override object ConvertEntity(object outerEntity)
        {
            global::MarketingDomainServiceData.Implementation.UserCitySelection userCitySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserCitySelection;
            if (userCitySelection != null)
            {
                global::Marketing.Services.UserCitySelection result = new global::Marketing.Services.UserCitySelection();
                result.Id = userCitySelection.Id;
                result.Selected = userCitySelection.Selected;
                result.CityId = userCitySelection.CityId;
                result.UserId = userCitySelection.UserId;
                result.CityName = userCitySelection.CityName;
                result.RegionName = userCitySelection.RegionName;
                result.Active = userCitySelection.Active;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserListingCategorySelection userListingCategorySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingCategorySelection;
            if (userListingCategorySelection != null)
            {
                global::Marketing.Services.UserListingCategorySelection result = new global::Marketing.Services.UserListingCategorySelection();
                result.Id = userListingCategorySelection.Id;
                result.Selected = userListingCategorySelection.Selected;
                result.CategoryName = userListingCategorySelection.CategoryName;
                result.GroupName = userListingCategorySelection.GroupName;
                result.Active = userListingCategorySelection.Active;
                result.UserId = userListingCategorySelection.UserId;
                result.CategoryId = userListingCategorySelection.CategoryId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserKeywordSelection userKeywordSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserKeywordSelection;
            if (userKeywordSelection != null)
            {
                global::Marketing.Services.UserKeywordSelection result = new global::Marketing.Services.UserKeywordSelection();
                result.Id = userKeywordSelection.Id;
                result.Keyword = userKeywordSelection.Keyword;
                result.WeightedScore = userKeywordSelection.WeightedScore;
                result.UserId = userKeywordSelection.UserId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserPreferenceSelection userPreferenceSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserPreferenceSelection;
            if (userPreferenceSelection != null)
            {
                global::Marketing.Services.UserPreferenceSelection result = new global::Marketing.Services.UserPreferenceSelection();
                result.Id = userPreferenceSelection.Id;
                result.UserId = userPreferenceSelection.UserId;
                result.LiveMode = userPreferenceSelection.LiveMode;
                result.BCCEmailAddress = userPreferenceSelection.BCCEmailAddress;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserListingItem userListingItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingItem;
            if (userListingItem != null)
            {
                global::Marketing.Services.UserListingItem result = new global::Marketing.Services.UserListingItem();
                result.Id = userListingItem.Id;
                result.Title = userListingItem.Title;
                result.CategoryName = userListingItem.CategoryName;
                result.GroupName = userListingItem.GroupName;
                result.RegionName = userListingItem.RegionName;
                result.CityName = userListingItem.CityName;
                result.Created = userListingItem.Created;
                result.PostElement = userListingItem.PostElement;
                result.UserId = userListingItem.UserId;
                result.Responded = userListingItem.Responded;
                result.ResponseId = userListingItem.ResponseId;
                result.Response = userListingItem.Response;
                result.ResponseText = userListingItem.ResponseText;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserListingResponseItem userListingResponseItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingResponseItem;
            if (userListingResponseItem != null)
            {
                global::Marketing.Services.UserListingResponseItem result = new global::Marketing.Services.UserListingResponseItem();
                result.Id = userListingResponseItem.Id;
                result.UserListingUrlId = userListingResponseItem.UserListingUrlId;
                result.UserId = userListingResponseItem.UserId;
                result.Created = userListingResponseItem.Created;
                result.Response = userListingResponseItem.Response;
                return result;
            }
            return null;
        }
       
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::MarketingDomainServiceData.Implementation.UserCitySelection outerUserCitySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserCitySelection;
            global::Marketing.Services.UserCitySelection innerUserCitySelection = innerResult as global::Marketing.Services.UserCitySelection;
            if ((outerUserCitySelection != null) && (innerUserCitySelection != null))
            {
                outerUserCitySelection.Id = innerUserCitySelection.Id;
                outerUserCitySelection.Selected = innerUserCitySelection.Selected;
                outerUserCitySelection.CityId = innerUserCitySelection.CityId;
                outerUserCitySelection.UserId = innerUserCitySelection.UserId;
                outerUserCitySelection.CityName = innerUserCitySelection.CityName;
                outerUserCitySelection.RegionName = innerUserCitySelection.RegionName;
                outerUserCitySelection.Active = innerUserCitySelection.Active;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserListingCategorySelection outerUserListingCategorySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingCategorySelection;
            global::Marketing.Services.UserListingCategorySelection innerUserListingCategorySelection = innerResult as global::Marketing.Services.UserListingCategorySelection;
            if ((outerUserListingCategorySelection != null) && (innerUserListingCategorySelection != null))
            {
                outerUserListingCategorySelection.Id = innerUserListingCategorySelection.Id;
                outerUserListingCategorySelection.Selected = innerUserListingCategorySelection.Selected;
                outerUserListingCategorySelection.CategoryName = innerUserListingCategorySelection.CategoryName;
                outerUserListingCategorySelection.GroupName = innerUserListingCategorySelection.GroupName;
                outerUserListingCategorySelection.Active = innerUserListingCategorySelection.Active;
                outerUserListingCategorySelection.UserId = innerUserListingCategorySelection.UserId;
                outerUserListingCategorySelection.CategoryId = innerUserListingCategorySelection.CategoryId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserKeywordSelection outerUserKeywordSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserKeywordSelection;
            global::Marketing.Services.UserKeywordSelection innerUserKeywordSelection = innerResult as global::Marketing.Services.UserKeywordSelection;
            if ((outerUserKeywordSelection != null) && (innerUserKeywordSelection != null))
            {
                outerUserKeywordSelection.Id = innerUserKeywordSelection.Id;
                outerUserKeywordSelection.Keyword = innerUserKeywordSelection.Keyword;
                outerUserKeywordSelection.WeightedScore = innerUserKeywordSelection.WeightedScore;
                outerUserKeywordSelection.UserId = innerUserKeywordSelection.UserId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserPreferenceSelection outerUserPreferenceSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserPreferenceSelection;
            global::Marketing.Services.UserPreferenceSelection innerUserPreferenceSelection = innerResult as global::Marketing.Services.UserPreferenceSelection;
            if ((outerUserPreferenceSelection != null) && (innerUserPreferenceSelection != null))
            {
                outerUserPreferenceSelection.Id = innerUserPreferenceSelection.Id;
                outerUserPreferenceSelection.UserId = innerUserPreferenceSelection.UserId;
                outerUserPreferenceSelection.LiveMode = innerUserPreferenceSelection.LiveMode;
                outerUserPreferenceSelection.BCCEmailAddress = innerUserPreferenceSelection.BCCEmailAddress;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserListingItem outerUserListingItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingItem;
            global::Marketing.Services.UserListingItem innerUserListingItem = innerResult as global::Marketing.Services.UserListingItem;
            if ((outerUserListingItem != null) && (innerUserListingItem != null))
            {
                outerUserListingItem.Id = innerUserListingItem.Id;
                outerUserListingItem.Title = innerUserListingItem.Title;
                outerUserListingItem.CategoryName = innerUserListingItem.CategoryName;
                outerUserListingItem.GroupName = innerUserListingItem.GroupName;
                outerUserListingItem.RegionName = innerUserListingItem.RegionName;
                outerUserListingItem.CityName = innerUserListingItem.CityName;
                outerUserListingItem.Created = innerUserListingItem.Created;
                outerUserListingItem.PostElement = innerUserListingItem.PostElement;
                outerUserListingItem.UserId = innerUserListingItem.UserId;
                outerUserListingItem.Responded = innerUserListingItem.Responded;
                outerUserListingItem.ResponseId = innerUserListingItem.ResponseId;
                outerUserListingItem.Response = innerUserListingItem.Response;
                outerUserListingItem.ResponseText = innerUserListingItem.ResponseText;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserListingResponseItem outerUserListingResponseItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingResponseItem;
            global::Marketing.Services.UserListingResponseItem innerUserListingResponseItem = innerResult as global::Marketing.Services.UserListingResponseItem;
            if ((outerUserListingResponseItem != null) && (innerUserListingResponseItem != null))
            {
                outerUserListingResponseItem.Id = innerUserListingResponseItem.Id;
                outerUserListingResponseItem.UserListingUrlId = innerUserListingResponseItem.UserListingUrlId;
                outerUserListingResponseItem.UserId = innerUserListingResponseItem.UserId;
                outerUserListingResponseItem.Created = innerUserListingResponseItem.Created;
                outerUserListingResponseItem.Response = innerUserListingResponseItem.Response;
                return;
            }
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.Marketing_CraigslistScraperData))
            {
                return new global::LightSwitchApplication.Marketing_CraigslistScraperDataService();
            }
            if (dataServiceType == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.MarketingDomainServiceDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.Marketing_CraigslistScraperData))
            {
                return new global::LightSwitchApplication.Implementation.Marketing_CraigslistScraperDataServiceImplementation(dataService);
            }
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.Implementation.MarketingDomainServiceDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.City) == definitionType)
            {
                return typeof(global::Marketing_CraigslistScraperData.Implementation.City);
            }
            if (typeof(global::LightSwitchApplication.UserCity) == definitionType)
            {
                return typeof(global::Marketing_CraigslistScraperData.Implementation.UserCity);
            }
            if (typeof(global::LightSwitchApplication.vw_aspnet_MembershipUser) == definitionType)
            {
                return typeof(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser);
            }
            if (typeof(global::LightSwitchApplication.UserCitySelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection);
            }
            if (typeof(global::LightSwitchApplication.UserListingCategorySelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection);
            }
            if (typeof(global::LightSwitchApplication.UserKeywordSelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserKeywordSelection);
            }
            if (typeof(global::LightSwitchApplication.UserPreferenceSelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection);
            }
            if (typeof(global::LightSwitchApplication.UserListingItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserListingItem);
            }
            if (typeof(global::LightSwitchApplication.UserListingResponseItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserListingResponseItem);
            }
            return null;
        }
    }
}

namespace Marketing_CraigslistScraperData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class City :
        global::LightSwitchApplication.City.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserCity :
        global::LightSwitchApplication.UserCity.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class vw_aspnet_MembershipUser :
        global::LightSwitchApplication.vw_aspnet_MembershipUser.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

namespace MarketingDomainServiceData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserCitySelection :
        global::LightSwitchApplication.UserCitySelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserListingCategorySelection :
        global::LightSwitchApplication.UserListingCategorySelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserKeywordSelection :
        global::LightSwitchApplication.UserKeywordSelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserPreferenceSelection :
        global::LightSwitchApplication.UserPreferenceSelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserListingItem :
        global::LightSwitchApplication.UserListingItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserListingResponseItem :
        global::LightSwitchApplication.UserListingResponseItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

