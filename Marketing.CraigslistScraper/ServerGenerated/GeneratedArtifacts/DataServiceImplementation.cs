//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext>
    {
    
        public MarketingDomainServiceDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region UserCitySelection
    
        public void InsertUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserCitySelections.AddObject(entity);
            }
        }
    
        public void UpdateUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserCitySelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserCitySelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserListingCategorySelection
    
        public void InsertUserListingCategorySelection(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserListingCategorySelections.AddObject(entity);
            }
        }
    
        public void UpdateUserListingCategorySelection(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserListingCategorySelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserListingCategorySelection(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserListingCategorySelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserKeywordSelection
    
        public void InsertUserKeywordSelection(global::MarketingDomainServiceData.Implementation.UserKeywordSelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserKeywordSelections.AddObject(entity);
            }
        }
    
        public void UpdateUserKeywordSelection(global::MarketingDomainServiceData.Implementation.UserKeywordSelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserKeywordSelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserKeywordSelection(global::MarketingDomainServiceData.Implementation.UserKeywordSelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserKeywordSelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserPreferenceSelection
    
        public void InsertUserPreferenceSelection(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserPreferenceSelections.AddObject(entity);
            }
        }
    
        public void UpdateUserPreferenceSelection(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserPreferenceSelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserPreferenceSelection(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserPreferenceSelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserListingItem
    
        public void InsertUserListingItem(global::MarketingDomainServiceData.Implementation.UserListingItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserListingItems.AddObject(entity);
            }
        }
    
        public void UpdateUserListingItem(global::MarketingDomainServiceData.Implementation.UserListingItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserListingItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserListingItem(global::MarketingDomainServiceData.Implementation.UserListingItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserListingItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserListingResponseItem
    
        public void InsertUserListingResponseItem(global::MarketingDomainServiceData.Implementation.UserListingResponseItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserListingResponseItems.AddObject(entity);
            }
        }
    
        public void UpdateUserListingResponseItem(global::MarketingDomainServiceData.Implementation.UserListingResponseItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserListingResponseItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserListingResponseItem(global::MarketingDomainServiceData.Implementation.UserListingResponseItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserListingResponseItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Operation
    
        public void InsertOperation(global::MarketingDomainServiceData.Implementation.Operation entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Operations.AddObject(entity);
            }
        }
    
        public void UpdateOperation(global::MarketingDomainServiceData.Implementation.Operation currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Operations, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteOperation(global::MarketingDomainServiceData.Implementation.Operation entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Operations.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region User
    
        public void InsertUser(global::MarketingDomainServiceData.Implementation.User entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Users.AddObject(entity);
            }
        }
    
        public void UpdateUser(global::MarketingDomainServiceData.Implementation.User currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Users, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUser(global::MarketingDomainServiceData.Implementation.User entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Users.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserTemplateItem
    
        public void InsertUserTemplateItem(global::MarketingDomainServiceData.Implementation.UserTemplateItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserTemplateItems.AddObject(entity);
            }
        }
    
        public void UpdateUserTemplateItem(global::MarketingDomainServiceData.Implementation.UserTemplateItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserTemplateItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserTemplateItem(global::MarketingDomainServiceData.Implementation.UserTemplateItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserTemplateItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserPostListFilterItem
    
        public void InsertUserPostListFilterItem(global::MarketingDomainServiceData.Implementation.UserPostListFilterItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserPostListFilterItems.AddObject(entity);
            }
        }
    
        public void UpdateUserPostListFilterItem(global::MarketingDomainServiceData.Implementation.UserPostListFilterItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserPostListFilterItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserPostListFilterItem(global::MarketingDomainServiceData.Implementation.UserPostListFilterItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserPostListFilterItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region BugReportItem
    
        public void InsertBugReportItem(global::MarketingDomainServiceData.Implementation.BugReportItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.BugReportItems.AddObject(entity);
            }
        }
    
        public void UpdateBugReportItem(global::MarketingDomainServiceData.Implementation.BugReportItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.BugReportItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteBugReportItem(global::MarketingDomainServiceData.Implementation.BugReportItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.BugReportItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region c_Error
    
        public void Insertc_Error(global::MarketingDomainServiceData.Implementation.c_Error entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Errors.AddObject(entity);
            }
        }
    
        public void Updatec_Error(global::MarketingDomainServiceData.Implementation.c_Error currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Errors, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletec_Error(global::MarketingDomainServiceData.Implementation.c_Error entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Errors.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ErrorDisplay
    
        public void InsertErrorDisplay(global::MarketingDomainServiceData.Implementation.ErrorDisplay entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ErrorDisplays.AddObject(entity);
            }
        }
    
        public void UpdateErrorDisplay(global::MarketingDomainServiceData.Implementation.ErrorDisplay currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ErrorDisplays, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteErrorDisplay(global::MarketingDomainServiceData.Implementation.ErrorDisplay entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ErrorDisplays.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserFile
    
        public void InsertUserFile(global::MarketingDomainServiceData.Implementation.UserFile entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserFiles.AddObject(entity);
            }
        }
    
        public void UpdateUserFile(global::MarketingDomainServiceData.Implementation.UserFile currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserFiles, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserFile(global::MarketingDomainServiceData.Implementation.UserFile entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserFiles.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region SystemSettingItem
    
        public void InsertSystemSettingItem(global::MarketingDomainServiceData.Implementation.SystemSettingItem entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.SystemSettingItems.AddObject(entity);
            }
        }
    
        public void UpdateSystemSettingItem(global::MarketingDomainServiceData.Implementation.SystemSettingItem currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.SystemSettingItems, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteSystemSettingItem(global::MarketingDomainServiceData.Implementation.SystemSettingItem entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.SystemSettingItems.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> CityId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_Single", frameworkOperators, CityId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> CityId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_SingleOrDefault", frameworkOperators, CityId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelections(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("GetUserCitySelections", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> GetUserCategorySelections(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("GetUserCategorySelections", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> GetUserKeywordSelections(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("GetUserKeywordSelections", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItems(string frameworkOperators, global::System.Nullable<global::System.Guid> userId, string filterKeywords, global::System.Nullable<global::System.DateTime> filterStartDate, global::System.Nullable<global::System.DateTime> filterEndDate)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetUserListingItems", frameworkOperators, userId, filterKeywords, filterStartDate, filterEndDate);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> GetUserListingResponseById(string frameworkOperators, global::System.Nullable<global::System.Guid> responseId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("GetUserListingResponseById", frameworkOperators, responseId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_Single(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> GetUserListingCategorySelectionByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("GetUserListingCategorySelectionByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> GetUserKeywordSelectionByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("GetUserKeywordSelectionByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelectionByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("GetUserCitySelectionByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> Users_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.User>("Users_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> Users_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.User>("Users_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> Users_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.User>("Users_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> UserTemplateItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("UserTemplateItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> UserTemplateItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("UserTemplateItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> UserTemplateItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("UserTemplateItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> GetUserTemplates(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("GetUserTemplates", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> GetUserTemplateItemById(string frameworkOperators, global::System.Nullable<global::System.Guid> id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("GetUserTemplateItemById", frameworkOperators, id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> GetUserPostListItemByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("GetUserPostListItemByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> UserPostListFilterItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("UserPostListFilterItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> UserPostListFilterItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("UserPostListFilterItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> UserPostListFilterItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("UserPostListFilterItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetFilteredUserListingItems(string frameworkOperators, global::System.Nullable<global::System.Guid> userId, global::System.Nullable<bool> filtersEnabled, global::System.Nullable<bool> showResponded, global::System.Nullable<bool> showNotResponded, global::System.Nullable<global::System.DateTime> postStartDate, global::System.Nullable<global::System.DateTime> postEndDate, global::System.Nullable<global::System.DateTime> responseStartDate, global::System.Nullable<global::System.DateTime> responseEndDate, string keywords, string regionsFilter, string statesFilter, string citiesFilter)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetFilteredUserListingItems", frameworkOperators, userId, filtersEnabled, showResponded, showNotResponded, postStartDate, postEndDate, responseStartDate, responseEndDate, keywords, regionsFilter, statesFilter, citiesFilter);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> BugReportItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.BugReportItem>("BugReportItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> BugReportItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.BugReportItem>("BugReportItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> BugReportItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.BugReportItem>("BugReportItems_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItemById(string frameworkOperators, global::System.Nullable<global::System.Guid> id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetUserListingItemById", frameworkOperators, id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> GetUserPreferenceSelectionByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("GetUserPreferenceSelectionByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> Errors_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.c_Error>("Errors_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> Errors_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.c_Error>("Errors_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> Errors_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.c_Error>("Errors_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> ErrorDisplays_Single(string frameworkOperators, string Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.ErrorDisplay>("ErrorDisplays_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> ErrorDisplays_SingleOrDefault(string frameworkOperators, string Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.ErrorDisplay>("ErrorDisplays_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> ErrorDisplays_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.ErrorDisplay>("ErrorDisplays_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> UserFiles_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("UserFiles_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> UserFiles_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("UserFiles_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> UserFiles_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("UserFiles_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> GetUserFilesByUserId(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("GetUserFilesByUserId", frameworkOperators, userId);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> SystemSettingItems_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.SystemSettingItem>("SystemSettingItems_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> SystemSettingItems_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.SystemSettingItem>("SystemSettingItems_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> SystemSettingItems_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.SystemSettingItem>("SystemSettingItems_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().MarketingDomainServiceData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.RiaDataServiceImplementation<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext, global::Marketing.Services.MarketingDomainService>
    {
        public MarketingDomainServiceDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_Single(global::System.Nullable<global::System.Guid> CityId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                (u) => (CityId.HasValue && (u.CityId == CityId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_SingleOrDefault(global::System.Nullable<global::System.Guid> CityId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                (u) => (CityId.HasValue && (u.CityId == CityId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("DefaultUserCitySelections").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelections(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.ThenBy(
                global::System.Linq.Queryable.OrderByDescending(
                    global::System.Linq.Queryable.Where(
                        this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                        (u) => ((userId.HasValue && (u.UserId == userId)) || (u.UserId == new global::System.Guid("00000000-0000-0000-0000-000000000000")))),
                    (u) => u.Selected),
                (u) => u.CityName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> UserListingCategorySelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("DefaultUserListingCategorySelection").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> GetUserCategorySelections(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = global::System.Linq.Queryable.ThenBy(
                global::System.Linq.Queryable.OrderBy(
                    global::System.Linq.Queryable.Where(
                        this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("UserListingCategorySelections_All"),
                        (u) => ((userId.HasValue && (u.UserId == userId)) || (u.UserId == new global::System.Guid("00000000-0000-0000-0000-000000000000")))),
                    (u) => u.GroupName),
                (u) => u.CategoryName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> UserKeywordSelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("DefaultUserKeywords").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> GetUserKeywordSelections(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = global::System.Linq.Queryable.OrderBy(
                global::System.Linq.Queryable.Where(
                    this.GetQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("UserKeywordSelections_All"),
                    (u) => (userId.HasValue && (u.UserId == userId))),
                (u) => u.Keyword);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("UserPreferenceSelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> UserPreferenceSelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("DefaultUserPreferenceSelections").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> UserListingItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("DefaultUserListingItems").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItems(global::System.Nullable<global::System.Guid> userId, string filterKeywords, global::System.Nullable<global::System.DateTime> filterStartDate, global::System.Nullable<global::System.DateTime> filterEndDate)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = global::System.Linq.Queryable.ThenBy(
                global::System.Linq.Queryable.ThenBy(
                    global::System.Linq.Queryable.ThenBy(
                        global::System.Linq.Queryable.ThenBy(
                            global::System.Linq.Queryable.ThenBy(
                                global::System.Linq.Queryable.OrderByDescending(
                                    global::System.Linq.Queryable.Where(
                                        this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("UserListingItems_All"),
                                        (u) => ((((userId.HasValue && (u.UserId == userId)) && (u.CityActive == true)) && (u.UserCityActive == true)) && (u.ListingCategoryActive == true))),
                                    (u) => u.KeywordScore),
                                (u) => u.Created),
                            (u) => u.RegionName),
                        (u) => u.CityName),
                    (u) => u.GroupName),
                (u) => u.CategoryName);
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> UserListingResponseItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("DefaultUserListingResponseItems").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> GetUserListingResponseById(global::System.Nullable<global::System.Guid> responseId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingResponseItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserListingResponseItem>("UserListingResponseItems_All"),
                (u) => ((responseId.HasValue && (u.Id == responseId)) || (u.Id == new global::System.Guid("00000000-0000-0000-0000-000000000000"))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_Single(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_All"),
                (o) => (Id.HasValue && (o.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_SingleOrDefault(global::System.Nullable<int> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.Operation>("Operations_All"),
                (o) => (Id.HasValue && (o.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> Operations_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.Operation> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.Operation>("DefaultServerOperations").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> GetUserListingCategorySelectionByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingCategorySelection>("GetUserListingCategorySelectionByUserId", userId).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> GetUserKeywordSelectionByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserKeywordSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserKeywordSelection>("GetUserKeywordSelectionByUserId", userId).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelectionByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("GetUserCitySelectionByUserId", userId).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> Users_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.User>("Users_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> Users_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.User>("Users_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> Users_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.User> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.User>("DefaultUsers").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> UserTemplateItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("UserTemplateItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> UserTemplateItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("UserTemplateItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> UserTemplateItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("DefaultUserTemplates").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> GetUserTemplates(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("UserTemplateItems_All"),
                (u) => (userId.HasValue && (u.UserId == userId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> GetUserTemplateItemById(global::System.Nullable<global::System.Guid> id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserTemplateItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserTemplateItem>("GetUserTemplateItemById", id).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> GetUserPostListItemByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("GetUserPostListItemByUserId", userId).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> UserPostListFilterItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("UserPostListFilterItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> UserPostListFilterItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("UserPostListFilterItems_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> UserPostListFilterItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserPostListFilterItem>("GetDefaultUserPostListFilterItems").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetFilteredUserListingItems(global::System.Nullable<global::System.Guid> userId, global::System.Nullable<bool> filtersEnabled, global::System.Nullable<bool> showResponded, global::System.Nullable<bool> showNotResponded, global::System.Nullable<global::System.DateTime> postStartDate, global::System.Nullable<global::System.DateTime> postEndDate, global::System.Nullable<global::System.DateTime> responseStartDate, global::System.Nullable<global::System.DateTime> responseEndDate, string keywords, string regionsFilter, string statesFilter, string citiesFilter)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetFilteredUserListingItems", userId, filtersEnabled, showResponded, showNotResponded, postStartDate, postEndDate, responseStartDate, responseEndDate, keywords, regionsFilter, statesFilter, citiesFilter).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> BugReportItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.BugReportItem>("BugReportItems_All"),
                (b) => (Id.HasValue && (b.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> BugReportItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.BugReportItem>("BugReportItems_All"),
                (b) => (Id.HasValue && (b.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> BugReportItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.BugReportItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.BugReportItem>("DefaultBugReportItems").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> GetUserListingItemById(global::System.Nullable<global::System.Guid> id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserListingItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserListingItem>("GetUserListingItemById", id).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> GetUserPreferenceSelectionByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserPreferenceSelection>("GetUserPreferenceSelectionByUserId", userId).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> Errors_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.c_Error>("Errors_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> Errors_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.c_Error>("Errors_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> Errors_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.c_Error> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.c_Error>("DefaultErrors").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> ErrorDisplays_Single(string Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.ErrorDisplay>("ErrorDisplays_All"),
                (e) => (e.Id.CompareTo(Id) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> ErrorDisplays_SingleOrDefault(string Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.ErrorDisplay>("ErrorDisplays_All"),
                (e) => (e.Id.CompareTo(Id) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> ErrorDisplays_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.ErrorDisplay> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.ErrorDisplay>("GetDefaultErrorDisplays").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> UserFiles_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("UserFiles_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> UserFiles_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("UserFiles_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> UserFiles_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserFile>("DefaultUserFiles").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> GetUserFilesByUserId(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserFile> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserFile>("UserFiles_All"),
                (u) => (userId.HasValue && (u.UserId == userId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> SystemSettingItems_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.SystemSettingItem>("SystemSettingItems_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> SystemSettingItems_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.SystemSettingItem>("SystemSettingItems_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> SystemSettingItems_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.SystemSettingItem> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.SystemSettingItem>("GetDefaultSystemSettingItems").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserCitySelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingCategorySelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserKeywordSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserKeywordSelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserPreferenceSelection();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserListingItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingItem();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserListingResponseItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingResponseItem();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.Operation))
            {
                return new global::MarketingDomainServiceData.Implementation.Operation();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.User))
            {
                return new global::MarketingDomainServiceData.Implementation.User();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserTemplateItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserTemplateItem();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserPostListFilterItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserPostListFilterItem();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.BugReportItem))
            {
                return new global::MarketingDomainServiceData.Implementation.BugReportItem();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.c_Error))
            {
                return new global::MarketingDomainServiceData.Implementation.c_Error();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.ErrorDisplay))
            {
                return new global::MarketingDomainServiceData.Implementation.ErrorDisplay();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserFile))
            {
                return new global::MarketingDomainServiceData.Implementation.UserFile();
            }
            if (type == typeof(global::MarketingDomainServiceData.Implementation.SystemSettingItem))
            {
                return new global::MarketingDomainServiceData.Implementation.SystemSettingItem();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext CreateObjectContext()
        {
            return new global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext(base.GetEntityConnectionString(
                "MarketingDomainServiceData", 
                "res://*/MarketingDomainServiceData.csdl|res://*/MarketingDomainServiceData.ssdl|res://*/MarketingDomainServiceData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.UserCitySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserCitySelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserListingCategorySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingCategorySelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserKeywordSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserKeywordSelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserPreferenceSelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserPreferenceSelection();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserListingItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingItem();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserListingResponseItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserListingResponseItem();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Operation))
            {
                return new global::MarketingDomainServiceData.Implementation.Operation();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.User))
            {
                return new global::MarketingDomainServiceData.Implementation.User();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserTemplateItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserTemplateItem();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserPostListFilterItem))
            {
                return new global::MarketingDomainServiceData.Implementation.UserPostListFilterItem();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.BugReportItem))
            {
                return new global::MarketingDomainServiceData.Implementation.BugReportItem();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.c_Error))
            {
                return new global::MarketingDomainServiceData.Implementation.c_Error();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ErrorDisplay))
            {
                return new global::MarketingDomainServiceData.Implementation.ErrorDisplay();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserFile))
            {
                return new global::MarketingDomainServiceData.Implementation.UserFile();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.SystemSettingItem))
            {
                return new global::MarketingDomainServiceData.Implementation.SystemSettingItem();
            }
            return null;
        }
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection))
            {
                return typeof(global::Marketing.Services.UserCitySelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection))
            {
                return typeof(global::Marketing.Services.UserListingCategorySelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserKeywordSelection))
            {
                return typeof(global::Marketing.Services.UserKeywordSelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection))
            {
                return typeof(global::Marketing.Services.UserPreferenceSelection);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserListingItem))
            {
                return typeof(global::Marketing.Services.UserListingItem);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserListingResponseItem))
            {
                return typeof(global::Marketing.Services.UserListingResponseItem);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.Operation))
            {
                return typeof(global::Marketing.Services.Operation);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.User))
            {
                return typeof(global::Marketing.Services.User);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserTemplateItem))
            {
                return typeof(global::Marketing.Services.UserTemplateItem);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserPostListFilterItem))
            {
                return typeof(global::Marketing.Services.UserPostListFilterItem);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.BugReportItem))
            {
                return typeof(global::Marketing.Services.BugReportItem);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.c_Error))
            {
                return typeof(global::Marketing.Services.Error);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.ErrorDisplay))
            {
                return typeof(global::Marketing.Services.ErrorDisplay);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserFile))
            {
                return typeof(global::Marketing.Services.UserFile);
            }
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.SystemSettingItem))
            {
                return typeof(global::Marketing.Services.SystemSettingItem);
            }
            return base.ConvertType(outerType);
        }
        protected override object ConvertEntity(object outerEntity)
        {
            global::MarketingDomainServiceData.Implementation.UserCitySelection userCitySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserCitySelection;
            if (userCitySelection != null)
            {
                global::Marketing.Services.UserCitySelection result = new global::Marketing.Services.UserCitySelection();
                result.Selected = userCitySelection.Selected;
                result.UserId = userCitySelection.UserId;
                result.CityName = userCitySelection.CityName;
                result.RegionName = userCitySelection.RegionName;
                result.Active = userCitySelection.Active;
                result.StateProvince = userCitySelection.StateProvince;
                result.CityId = userCitySelection.CityId;
                result.Id = userCitySelection.Id;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserListingCategorySelection userListingCategorySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingCategorySelection;
            if (userListingCategorySelection != null)
            {
                global::Marketing.Services.UserListingCategorySelection result = new global::Marketing.Services.UserListingCategorySelection();
                result.Id = userListingCategorySelection.Id;
                result.Selected = userListingCategorySelection.Selected;
                result.CategoryName = userListingCategorySelection.CategoryName;
                result.GroupName = userListingCategorySelection.GroupName;
                result.Active = userListingCategorySelection.Active;
                result.UserId = userListingCategorySelection.UserId;
                result.CategoryId = userListingCategorySelection.CategoryId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserKeywordSelection userKeywordSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserKeywordSelection;
            if (userKeywordSelection != null)
            {
                global::Marketing.Services.UserKeywordSelection result = new global::Marketing.Services.UserKeywordSelection();
                result.Id = userKeywordSelection.Id;
                result.Keyword = userKeywordSelection.Keyword;
                result.WeightedScore = userKeywordSelection.WeightedScore;
                result.UserId = userKeywordSelection.UserId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserPreferenceSelection userPreferenceSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserPreferenceSelection;
            if (userPreferenceSelection != null)
            {
                global::Marketing.Services.UserPreferenceSelection result = new global::Marketing.Services.UserPreferenceSelection();
                result.Id = userPreferenceSelection.Id;
                result.UserId = userPreferenceSelection.UserId;
                result.LiveMode = userPreferenceSelection.LiveMode;
                result.BCCEmailAddress = userPreferenceSelection.BCCEmailAddress;
                result.SMTPUsername = userPreferenceSelection.SMTPUsername;
                result.SMTPServer = userPreferenceSelection.SMTPServer;
                result.SMTPPort = userPreferenceSelection.SMTPPort;
                result.RequiresSSL = userPreferenceSelection.RequiresSSL;
                result.SMTPPassword = userPreferenceSelection.SMTPPassword;
                result.MinimumKeywordScore = userPreferenceSelection.MinimumKeywordScore;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserListingItem userListingItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingItem;
            if (userListingItem != null)
            {
                global::Marketing.Services.UserListingItem result = new global::Marketing.Services.UserListingItem();
                result.Id = userListingItem.Id;
                result.Title = userListingItem.Title;
                result.CategoryName = userListingItem.CategoryName;
                result.GroupName = userListingItem.GroupName;
                result.RegionName = userListingItem.RegionName;
                result.CityName = userListingItem.CityName;
                result.Created = userListingItem.Created;
                result.PostElement = userListingItem.PostElement;
                result.UserId = userListingItem.UserId;
                result.Responded = userListingItem.Responded;
                result.ResponseId = userListingItem.ResponseId;
                result.Response = userListingItem.Response;
                result.ResponseText = userListingItem.ResponseText;
                result.PostHtml = userListingItem.PostHtml;
                result.ResponseSent = userListingItem.ResponseSent;
                result.StateProvince = userListingItem.StateProvince;
                result.CityActive = userListingItem.CityActive;
                result.UserCityActive = userListingItem.UserCityActive;
                result.ListingCategoryActive = userListingItem.ListingCategoryActive;
                result.KeywordScore = userListingItem.KeywordScore;
                result.KeywordDisplay = userListingItem.KeywordDisplay;
                result.UseDefaultResponse = userListingItem.UseDefaultResponse;
                result.PostDate = userListingItem.PostDate;
                result.PostText = userListingItem.PostText;
                result.IsHidden = userListingItem.IsHidden;
                result.UserFileId = userListingItem.UserFileId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserListingResponseItem userListingResponseItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingResponseItem;
            if (userListingResponseItem != null)
            {
                global::Marketing.Services.UserListingResponseItem result = new global::Marketing.Services.UserListingResponseItem();
                result.Id = userListingResponseItem.Id;
                result.UserListingUrlId = userListingResponseItem.UserListingUrlId;
                result.UserId = userListingResponseItem.UserId;
                result.Created = userListingResponseItem.Created;
                result.Response = userListingResponseItem.Response;
                result.UserFileId = userListingResponseItem.UserFileId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.Operation operation = outerEntity as global::MarketingDomainServiceData.Implementation.Operation;
            if (operation != null)
            {
                global::Marketing.Services.Operation result = new global::Marketing.Services.Operation();
                result.Id = operation.Id;
                result.Created = operation.Created;
                result.OperationName = operation.OperationName;
                result.Parameters = operation.Parameters;
                result.UserId = operation.UserId;
                result.Visible = operation.Visible;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.User user = outerEntity as global::MarketingDomainServiceData.Implementation.User;
            if (user != null)
            {
                global::Marketing.Services.User result = new global::Marketing.Services.User();
                result.Id = user.Id;
                result.Username = user.Username;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserTemplateItem userTemplateItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserTemplateItem;
            if (userTemplateItem != null)
            {
                global::Marketing.Services.UserTemplateItem result = new global::Marketing.Services.UserTemplateItem();
                result.Id = userTemplateItem.Id;
                result.UserId = userTemplateItem.UserId;
                result.Created = userTemplateItem.Created;
                result.LastUpdated = userTemplateItem.LastUpdated;
                result.IsDefault = userTemplateItem.IsDefault;
                result.TemplateName = userTemplateItem.TemplateName;
                result.TemplateHtml = userTemplateItem.TemplateHtml;
                result.TemplateText = userTemplateItem.TemplateText;
                result.UserFileId = userTemplateItem.UserFileId;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserPostListFilterItem userPostListFilterItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserPostListFilterItem;
            if (userPostListFilterItem != null)
            {
                global::Marketing.Services.UserPostListFilterItem result = new global::Marketing.Services.UserPostListFilterItem();
                result.Id = userPostListFilterItem.Id;
                result.UserId = userPostListFilterItem.UserId;
                result.PostStartDate = userPostListFilterItem.PostStartDate;
                result.PostEndDate = userPostListFilterItem.PostEndDate;
                result.ResponseStartDate = userPostListFilterItem.ResponseStartDate;
                result.ResponseEndDate = userPostListFilterItem.ResponseEndDate;
                result.FilteredKeywords = userPostListFilterItem.FilteredKeywords;
                result.FilteredCities = userPostListFilterItem.FilteredCities;
                result.FilteredStates = userPostListFilterItem.FilteredStates;
                result.FilteredCountries = userPostListFilterItem.FilteredCountries;
                result.ShowResponded = userPostListFilterItem.ShowResponded;
                result.ShowNotResponded = userPostListFilterItem.ShowNotResponded;
                result.FiltersEnabled = userPostListFilterItem.FiltersEnabled;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.BugReportItem bugReportItem = outerEntity as global::MarketingDomainServiceData.Implementation.BugReportItem;
            if (bugReportItem != null)
            {
                global::Marketing.Services.BugReportItem result = new global::Marketing.Services.BugReportItem();
                result.Id = bugReportItem.Id;
                result.Description = bugReportItem.Description;
                result.Resolution = bugReportItem.Resolution;
                result.ReproductionSteps = bugReportItem.ReproductionSteps;
                result.Resolved = bugReportItem.Resolved;
                result.Reported = bugReportItem.Reported;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.c_Error c_Error = outerEntity as global::MarketingDomainServiceData.Implementation.c_Error;
            if (c_Error != null)
            {
                global::Marketing.Services.Error result = new global::Marketing.Services.Error();
                result.Id = c_Error.Id;
                result.OriginatingClassName = c_Error.OriginatingClassName;
                result.MethodName = c_Error.MethodName;
                result.ExceptionTypeName = c_Error.ExceptionTypeName;
                result.ExceptionMessage = c_Error.ExceptionMessage;
                result.ErrorMessage = c_Error.ErrorMessage;
                result.ErrorData = c_Error.ErrorData;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.ErrorDisplay errorDisplay = outerEntity as global::MarketingDomainServiceData.Implementation.ErrorDisplay;
            if (errorDisplay != null)
            {
                global::Marketing.Services.ErrorDisplay result = new global::Marketing.Services.ErrorDisplay();
                result.Id = errorDisplay.Id;
                result.Timestamp = errorDisplay.Timestamp;
                result.Title = errorDisplay.Title;
                result.Message = errorDisplay.Message;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.UserFile userFile = outerEntity as global::MarketingDomainServiceData.Implementation.UserFile;
            if (userFile != null)
            {
                global::Marketing.Services.UserFile result = new global::Marketing.Services.UserFile();
                result.Id = userFile.Id;
                result.UserId = userFile.UserId;
                result.Filename = userFile.Filename;
                result.Extension = userFile.Extension;
                result.Created = userFile.Created;
                result.Deleted = userFile.Deleted;
                result.ByteCount = userFile.ByteCount;
                result.RawFile = userFile.RawFile;
                return result;
            }
            global::MarketingDomainServiceData.Implementation.SystemSettingItem systemSettingItem = outerEntity as global::MarketingDomainServiceData.Implementation.SystemSettingItem;
            if (systemSettingItem != null)
            {
                global::Marketing.Services.SystemSettingItem result = new global::Marketing.Services.SystemSettingItem();
                result.Id = systemSettingItem.Id;
                result.SettingName = systemSettingItem.SettingName;
                result.SettingValue = systemSettingItem.SettingValue;
                return result;
            }
            return null;
        }
       
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::MarketingDomainServiceData.Implementation.UserCitySelection outerUserCitySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserCitySelection;
            global::Marketing.Services.UserCitySelection innerUserCitySelection = innerResult as global::Marketing.Services.UserCitySelection;
            if ((outerUserCitySelection != null) && (innerUserCitySelection != null))
            {
                outerUserCitySelection.Selected = innerUserCitySelection.Selected;
                outerUserCitySelection.UserId = innerUserCitySelection.UserId;
                outerUserCitySelection.CityName = innerUserCitySelection.CityName;
                outerUserCitySelection.RegionName = innerUserCitySelection.RegionName;
                outerUserCitySelection.Active = innerUserCitySelection.Active;
                outerUserCitySelection.StateProvince = innerUserCitySelection.StateProvince;
                outerUserCitySelection.CityId = innerUserCitySelection.CityId;
                outerUserCitySelection.Id = innerUserCitySelection.Id;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserListingCategorySelection outerUserListingCategorySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingCategorySelection;
            global::Marketing.Services.UserListingCategorySelection innerUserListingCategorySelection = innerResult as global::Marketing.Services.UserListingCategorySelection;
            if ((outerUserListingCategorySelection != null) && (innerUserListingCategorySelection != null))
            {
                outerUserListingCategorySelection.Id = innerUserListingCategorySelection.Id;
                outerUserListingCategorySelection.Selected = innerUserListingCategorySelection.Selected;
                outerUserListingCategorySelection.CategoryName = innerUserListingCategorySelection.CategoryName;
                outerUserListingCategorySelection.GroupName = innerUserListingCategorySelection.GroupName;
                outerUserListingCategorySelection.Active = innerUserListingCategorySelection.Active;
                outerUserListingCategorySelection.UserId = innerUserListingCategorySelection.UserId;
                outerUserListingCategorySelection.CategoryId = innerUserListingCategorySelection.CategoryId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserKeywordSelection outerUserKeywordSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserKeywordSelection;
            global::Marketing.Services.UserKeywordSelection innerUserKeywordSelection = innerResult as global::Marketing.Services.UserKeywordSelection;
            if ((outerUserKeywordSelection != null) && (innerUserKeywordSelection != null))
            {
                outerUserKeywordSelection.Id = innerUserKeywordSelection.Id;
                outerUserKeywordSelection.Keyword = innerUserKeywordSelection.Keyword;
                outerUserKeywordSelection.WeightedScore = innerUserKeywordSelection.WeightedScore;
                outerUserKeywordSelection.UserId = innerUserKeywordSelection.UserId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserPreferenceSelection outerUserPreferenceSelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserPreferenceSelection;
            global::Marketing.Services.UserPreferenceSelection innerUserPreferenceSelection = innerResult as global::Marketing.Services.UserPreferenceSelection;
            if ((outerUserPreferenceSelection != null) && (innerUserPreferenceSelection != null))
            {
                outerUserPreferenceSelection.Id = innerUserPreferenceSelection.Id;
                outerUserPreferenceSelection.UserId = innerUserPreferenceSelection.UserId;
                outerUserPreferenceSelection.LiveMode = innerUserPreferenceSelection.LiveMode;
                outerUserPreferenceSelection.BCCEmailAddress = innerUserPreferenceSelection.BCCEmailAddress;
                outerUserPreferenceSelection.SMTPUsername = innerUserPreferenceSelection.SMTPUsername;
                outerUserPreferenceSelection.SMTPServer = innerUserPreferenceSelection.SMTPServer;
                outerUserPreferenceSelection.SMTPPort = innerUserPreferenceSelection.SMTPPort;
                outerUserPreferenceSelection.RequiresSSL = innerUserPreferenceSelection.RequiresSSL;
                outerUserPreferenceSelection.SMTPPassword = innerUserPreferenceSelection.SMTPPassword;
                outerUserPreferenceSelection.MinimumKeywordScore = innerUserPreferenceSelection.MinimumKeywordScore;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserListingItem outerUserListingItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingItem;
            global::Marketing.Services.UserListingItem innerUserListingItem = innerResult as global::Marketing.Services.UserListingItem;
            if ((outerUserListingItem != null) && (innerUserListingItem != null))
            {
                outerUserListingItem.Id = innerUserListingItem.Id;
                outerUserListingItem.Title = innerUserListingItem.Title;
                outerUserListingItem.CategoryName = innerUserListingItem.CategoryName;
                outerUserListingItem.GroupName = innerUserListingItem.GroupName;
                outerUserListingItem.RegionName = innerUserListingItem.RegionName;
                outerUserListingItem.CityName = innerUserListingItem.CityName;
                outerUserListingItem.Created = innerUserListingItem.Created;
                outerUserListingItem.PostElement = innerUserListingItem.PostElement;
                outerUserListingItem.UserId = innerUserListingItem.UserId;
                outerUserListingItem.Responded = innerUserListingItem.Responded;
                outerUserListingItem.ResponseId = innerUserListingItem.ResponseId;
                outerUserListingItem.Response = innerUserListingItem.Response;
                outerUserListingItem.ResponseText = innerUserListingItem.ResponseText;
                outerUserListingItem.PostHtml = innerUserListingItem.PostHtml;
                outerUserListingItem.ResponseSent = innerUserListingItem.ResponseSent;
                outerUserListingItem.StateProvince = innerUserListingItem.StateProvince;
                outerUserListingItem.CityActive = innerUserListingItem.CityActive;
                outerUserListingItem.UserCityActive = innerUserListingItem.UserCityActive;
                outerUserListingItem.ListingCategoryActive = innerUserListingItem.ListingCategoryActive;
                outerUserListingItem.KeywordScore = innerUserListingItem.KeywordScore;
                outerUserListingItem.KeywordDisplay = innerUserListingItem.KeywordDisplay;
                outerUserListingItem.UseDefaultResponse = innerUserListingItem.UseDefaultResponse;
                outerUserListingItem.PostDate = innerUserListingItem.PostDate;
                outerUserListingItem.PostText = innerUserListingItem.PostText;
                outerUserListingItem.IsHidden = innerUserListingItem.IsHidden;
                outerUserListingItem.UserFileId = innerUserListingItem.UserFileId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserListingResponseItem outerUserListingResponseItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserListingResponseItem;
            global::Marketing.Services.UserListingResponseItem innerUserListingResponseItem = innerResult as global::Marketing.Services.UserListingResponseItem;
            if ((outerUserListingResponseItem != null) && (innerUserListingResponseItem != null))
            {
                outerUserListingResponseItem.Id = innerUserListingResponseItem.Id;
                outerUserListingResponseItem.UserListingUrlId = innerUserListingResponseItem.UserListingUrlId;
                outerUserListingResponseItem.UserId = innerUserListingResponseItem.UserId;
                outerUserListingResponseItem.Created = innerUserListingResponseItem.Created;
                outerUserListingResponseItem.Response = innerUserListingResponseItem.Response;
                outerUserListingResponseItem.UserFileId = innerUserListingResponseItem.UserFileId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.Operation outerOperation = outerEntity as global::MarketingDomainServiceData.Implementation.Operation;
            global::Marketing.Services.Operation innerOperation = innerResult as global::Marketing.Services.Operation;
            if ((outerOperation != null) && (innerOperation != null))
            {
                outerOperation.Id = innerOperation.Id;
                outerOperation.Created = innerOperation.Created;
                outerOperation.OperationName = innerOperation.OperationName;
                outerOperation.Parameters = innerOperation.Parameters;
                outerOperation.UserId = innerOperation.UserId;
                outerOperation.Visible = innerOperation.Visible;
                return;
            }
            global::MarketingDomainServiceData.Implementation.User outerUser = outerEntity as global::MarketingDomainServiceData.Implementation.User;
            global::Marketing.Services.User innerUser = innerResult as global::Marketing.Services.User;
            if ((outerUser != null) && (innerUser != null))
            {
                outerUser.Id = innerUser.Id;
                outerUser.Username = innerUser.Username;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserTemplateItem outerUserTemplateItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserTemplateItem;
            global::Marketing.Services.UserTemplateItem innerUserTemplateItem = innerResult as global::Marketing.Services.UserTemplateItem;
            if ((outerUserTemplateItem != null) && (innerUserTemplateItem != null))
            {
                outerUserTemplateItem.Id = innerUserTemplateItem.Id;
                outerUserTemplateItem.UserId = innerUserTemplateItem.UserId;
                outerUserTemplateItem.Created = innerUserTemplateItem.Created;
                outerUserTemplateItem.LastUpdated = innerUserTemplateItem.LastUpdated;
                outerUserTemplateItem.IsDefault = innerUserTemplateItem.IsDefault;
                outerUserTemplateItem.TemplateName = innerUserTemplateItem.TemplateName;
                outerUserTemplateItem.TemplateHtml = innerUserTemplateItem.TemplateHtml;
                outerUserTemplateItem.TemplateText = innerUserTemplateItem.TemplateText;
                outerUserTemplateItem.UserFileId = innerUserTemplateItem.UserFileId;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserPostListFilterItem outerUserPostListFilterItem = outerEntity as global::MarketingDomainServiceData.Implementation.UserPostListFilterItem;
            global::Marketing.Services.UserPostListFilterItem innerUserPostListFilterItem = innerResult as global::Marketing.Services.UserPostListFilterItem;
            if ((outerUserPostListFilterItem != null) && (innerUserPostListFilterItem != null))
            {
                outerUserPostListFilterItem.Id = innerUserPostListFilterItem.Id;
                outerUserPostListFilterItem.UserId = innerUserPostListFilterItem.UserId;
                outerUserPostListFilterItem.PostStartDate = innerUserPostListFilterItem.PostStartDate;
                outerUserPostListFilterItem.PostEndDate = innerUserPostListFilterItem.PostEndDate;
                outerUserPostListFilterItem.ResponseStartDate = innerUserPostListFilterItem.ResponseStartDate;
                outerUserPostListFilterItem.ResponseEndDate = innerUserPostListFilterItem.ResponseEndDate;
                outerUserPostListFilterItem.FilteredKeywords = innerUserPostListFilterItem.FilteredKeywords;
                outerUserPostListFilterItem.FilteredCities = innerUserPostListFilterItem.FilteredCities;
                outerUserPostListFilterItem.FilteredStates = innerUserPostListFilterItem.FilteredStates;
                outerUserPostListFilterItem.FilteredCountries = innerUserPostListFilterItem.FilteredCountries;
                outerUserPostListFilterItem.ShowResponded = innerUserPostListFilterItem.ShowResponded;
                outerUserPostListFilterItem.ShowNotResponded = innerUserPostListFilterItem.ShowNotResponded;
                outerUserPostListFilterItem.FiltersEnabled = innerUserPostListFilterItem.FiltersEnabled;
                return;
            }
            global::MarketingDomainServiceData.Implementation.BugReportItem outerBugReportItem = outerEntity as global::MarketingDomainServiceData.Implementation.BugReportItem;
            global::Marketing.Services.BugReportItem innerBugReportItem = innerResult as global::Marketing.Services.BugReportItem;
            if ((outerBugReportItem != null) && (innerBugReportItem != null))
            {
                outerBugReportItem.Id = innerBugReportItem.Id;
                outerBugReportItem.Description = innerBugReportItem.Description;
                outerBugReportItem.Resolution = innerBugReportItem.Resolution;
                outerBugReportItem.ReproductionSteps = innerBugReportItem.ReproductionSteps;
                outerBugReportItem.Resolved = innerBugReportItem.Resolved;
                outerBugReportItem.Reported = innerBugReportItem.Reported;
                return;
            }
            global::MarketingDomainServiceData.Implementation.c_Error outerc_Error = outerEntity as global::MarketingDomainServiceData.Implementation.c_Error;
            global::Marketing.Services.Error innerc_Error = innerResult as global::Marketing.Services.Error;
            if ((outerc_Error != null) && (innerc_Error != null))
            {
                outerc_Error.Id = innerc_Error.Id;
                outerc_Error.OriginatingClassName = innerc_Error.OriginatingClassName;
                outerc_Error.MethodName = innerc_Error.MethodName;
                outerc_Error.ExceptionTypeName = innerc_Error.ExceptionTypeName;
                outerc_Error.ExceptionMessage = innerc_Error.ExceptionMessage;
                outerc_Error.ErrorMessage = innerc_Error.ErrorMessage;
                outerc_Error.ErrorData = innerc_Error.ErrorData;
                return;
            }
            global::MarketingDomainServiceData.Implementation.ErrorDisplay outerErrorDisplay = outerEntity as global::MarketingDomainServiceData.Implementation.ErrorDisplay;
            global::Marketing.Services.ErrorDisplay innerErrorDisplay = innerResult as global::Marketing.Services.ErrorDisplay;
            if ((outerErrorDisplay != null) && (innerErrorDisplay != null))
            {
                outerErrorDisplay.Id = innerErrorDisplay.Id;
                outerErrorDisplay.Timestamp = innerErrorDisplay.Timestamp;
                outerErrorDisplay.Title = innerErrorDisplay.Title;
                outerErrorDisplay.Message = innerErrorDisplay.Message;
                return;
            }
            global::MarketingDomainServiceData.Implementation.UserFile outerUserFile = outerEntity as global::MarketingDomainServiceData.Implementation.UserFile;
            global::Marketing.Services.UserFile innerUserFile = innerResult as global::Marketing.Services.UserFile;
            if ((outerUserFile != null) && (innerUserFile != null))
            {
                outerUserFile.Id = innerUserFile.Id;
                outerUserFile.UserId = innerUserFile.UserId;
                outerUserFile.Filename = innerUserFile.Filename;
                outerUserFile.Extension = innerUserFile.Extension;
                outerUserFile.Created = innerUserFile.Created;
                outerUserFile.Deleted = innerUserFile.Deleted;
                outerUserFile.ByteCount = innerUserFile.ByteCount;
                outerUserFile.RawFile = innerUserFile.RawFile;
                return;
            }
            global::MarketingDomainServiceData.Implementation.SystemSettingItem outerSystemSettingItem = outerEntity as global::MarketingDomainServiceData.Implementation.SystemSettingItem;
            global::Marketing.Services.SystemSettingItem innerSystemSettingItem = innerResult as global::Marketing.Services.SystemSettingItem;
            if ((outerSystemSettingItem != null) && (innerSystemSettingItem != null))
            {
                outerSystemSettingItem.Id = innerSystemSettingItem.Id;
                outerSystemSettingItem.SettingName = innerSystemSettingItem.SettingName;
                outerSystemSettingItem.SettingValue = innerSystemSettingItem.SettingValue;
                return;
            }
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.MarketingDomainServiceDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.Implementation.MarketingDomainServiceDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.UserCitySelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection);
            }
            if (typeof(global::LightSwitchApplication.UserListingCategorySelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserListingCategorySelection);
            }
            if (typeof(global::LightSwitchApplication.UserKeywordSelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserKeywordSelection);
            }
            if (typeof(global::LightSwitchApplication.UserPreferenceSelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserPreferenceSelection);
            }
            if (typeof(global::LightSwitchApplication.UserListingItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserListingItem);
            }
            if (typeof(global::LightSwitchApplication.UserListingResponseItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserListingResponseItem);
            }
            if (typeof(global::LightSwitchApplication.Operation) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.Operation);
            }
            if (typeof(global::LightSwitchApplication.User) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.User);
            }
            if (typeof(global::LightSwitchApplication.UserTemplateItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserTemplateItem);
            }
            if (typeof(global::LightSwitchApplication.UserPostListFilterItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserPostListFilterItem);
            }
            if (typeof(global::LightSwitchApplication.BugReportItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.BugReportItem);
            }
            if (typeof(global::LightSwitchApplication.c_Error) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.c_Error);
            }
            if (typeof(global::LightSwitchApplication.ErrorDisplay) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.ErrorDisplay);
            }
            if (typeof(global::LightSwitchApplication.UserFile) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserFile);
            }
            if (typeof(global::LightSwitchApplication.SystemSettingItem) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.SystemSettingItem);
            }
            return null;
        }
    }
}

namespace MarketingDomainServiceData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserCitySelection :
        global::LightSwitchApplication.UserCitySelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserListingCategorySelection :
        global::LightSwitchApplication.UserListingCategorySelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserKeywordSelection :
        global::LightSwitchApplication.UserKeywordSelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserPreferenceSelection :
        global::LightSwitchApplication.UserPreferenceSelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserListingItem :
        global::LightSwitchApplication.UserListingItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserListingResponseItem :
        global::LightSwitchApplication.UserListingResponseItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Operation :
        global::LightSwitchApplication.Operation.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class User :
        global::LightSwitchApplication.User.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserTemplateItem :
        global::LightSwitchApplication.UserTemplateItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserPostListFilterItem :
        global::LightSwitchApplication.UserPostListFilterItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class BugReportItem :
        global::LightSwitchApplication.BugReportItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class c_Error :
        global::LightSwitchApplication.c_Error.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ErrorDisplay :
        global::LightSwitchApplication.ErrorDisplay.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserFile :
        global::LightSwitchApplication.UserFile.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class SystemSettingItem :
        global::LightSwitchApplication.SystemSettingItem.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

