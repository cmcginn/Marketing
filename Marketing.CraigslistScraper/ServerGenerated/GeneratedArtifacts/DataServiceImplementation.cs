//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class Marketing_CraigslistScraperDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext>
    {
    
        public Marketing_CraigslistScraperDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region City
    
        public void InsertCity(global::Marketing_CraigslistScraperData.Implementation.City entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Cities.AddObject(entity);
            }
        }
    
        public void UpdateCity(global::Marketing_CraigslistScraperData.Implementation.City currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Cities, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteCity(global::Marketing_CraigslistScraperData.Implementation.City entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Cities.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region UserCity
    
        public void InsertUserCity(global::Marketing_CraigslistScraperData.Implementation.UserCity entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserCities.AddObject(entity);
            }
        }
    
        public void UpdateUserCity(global::Marketing_CraigslistScraperData.Implementation.UserCity currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserCities, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserCity(global::Marketing_CraigslistScraperData.Implementation.UserCity entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserCities.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region vw_aspnet_MembershipUser
    
        public void Insertvw_aspnet_MembershipUser(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.vw_aspnet_MembershipUsers.AddObject(entity);
            }
        }
    
        public void Updatevw_aspnet_MembershipUser(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.vw_aspnet_MembershipUsers, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletevw_aspnet_MembershipUser(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.vw_aspnet_MembershipUsers.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_All(string frameworkOperators)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_All(string frameworkOperators)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_Single", frameworkOperators, UserId, PasswordFormat, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, ApplicationId, UserName, IsAnonymous, LastActivityDate);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_SingleOrDefault", frameworkOperators, UserId, PasswordFormat, IsApproved, IsLockedOut, CreateDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, ApplicationId, UserName, IsAnonymous, LastActivityDate);
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_All(string frameworkOperators)
        {
            return this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_All", frameworkOperators);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().Marketing_CraigslistScraperData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class Marketing_CraigslistScraperDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext>
    {
        public Marketing_CraigslistScraperDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.City>("Cities_All"),
                (c) => (Id.HasValue && (c.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> Cities_All()
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.City> query;
            query = base.CreateQuery<global::Marketing_CraigslistScraperData.Implementation.City>("[Cities]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("UserCities_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> UserCities_All()
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.UserCity> query;
            query = base.CreateQuery<global::Marketing_CraigslistScraperData.Implementation.UserCity>("[UserCities]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_Single(global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_All"),
                (v) => ((((((((((((((((LastActivityDate.HasValue && (v.LastActivityDate == LastActivityDate)) && (IsAnonymous.HasValue && (v.IsAnonymous == IsAnonymous))) && (v.UserName.CompareTo(UserName) == 0)) && (ApplicationId.HasValue && (v.ApplicationId == ApplicationId))) && (FailedPasswordAnswerAttemptWindowStart.HasValue && (v.FailedPasswordAnswerAttemptWindowStart == FailedPasswordAnswerAttemptWindowStart))) && (FailedPasswordAnswerAttemptCount.HasValue && (v.FailedPasswordAnswerAttemptCount == FailedPasswordAnswerAttemptCount))) && (FailedPasswordAttemptWindowStart.HasValue && (v.FailedPasswordAttemptWindowStart == FailedPasswordAttemptWindowStart))) && (FailedPasswordAttemptCount.HasValue && (v.FailedPasswordAttemptCount == FailedPasswordAttemptCount))) && (LastLockoutDate.HasValue && (v.LastLockoutDate == LastLockoutDate))) && (LastPasswordChangedDate.HasValue && (v.LastPasswordChangedDate == LastPasswordChangedDate))) && (LastLoginDate.HasValue && (v.LastLoginDate == LastLoginDate))) && (CreateDate.HasValue && (v.CreateDate == CreateDate))) && (IsLockedOut.HasValue && (v.IsLockedOut == IsLockedOut))) && (IsApproved.HasValue && (v.IsApproved == IsApproved))) && (PasswordFormat.HasValue && (v.PasswordFormat == PasswordFormat))) && (UserId.HasValue && (v.UserId == UserId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_SingleOrDefault(global::System.Nullable<global::System.Guid> UserId, global::System.Nullable<int> PasswordFormat, global::System.Nullable<bool> IsApproved, global::System.Nullable<bool> IsLockedOut, global::System.Nullable<global::System.DateTime> CreateDate, global::System.Nullable<global::System.DateTime> LastLoginDate, global::System.Nullable<global::System.DateTime> LastPasswordChangedDate, global::System.Nullable<global::System.DateTime> LastLockoutDate, global::System.Nullable<int> FailedPasswordAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAttemptWindowStart, global::System.Nullable<int> FailedPasswordAnswerAttemptCount, global::System.Nullable<global::System.DateTime> FailedPasswordAnswerAttemptWindowStart, global::System.Nullable<global::System.Guid> ApplicationId, string UserName, global::System.Nullable<bool> IsAnonymous, global::System.Nullable<global::System.DateTime> LastActivityDate)
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("vw_aspnet_MembershipUsers_All"),
                (v) => ((((((((((((((((LastActivityDate.HasValue && (v.LastActivityDate == LastActivityDate)) && (IsAnonymous.HasValue && (v.IsAnonymous == IsAnonymous))) && (v.UserName.CompareTo(UserName) == 0)) && (ApplicationId.HasValue && (v.ApplicationId == ApplicationId))) && (FailedPasswordAnswerAttemptWindowStart.HasValue && (v.FailedPasswordAnswerAttemptWindowStart == FailedPasswordAnswerAttemptWindowStart))) && (FailedPasswordAnswerAttemptCount.HasValue && (v.FailedPasswordAnswerAttemptCount == FailedPasswordAnswerAttemptCount))) && (FailedPasswordAttemptWindowStart.HasValue && (v.FailedPasswordAttemptWindowStart == FailedPasswordAttemptWindowStart))) && (FailedPasswordAttemptCount.HasValue && (v.FailedPasswordAttemptCount == FailedPasswordAttemptCount))) && (LastLockoutDate.HasValue && (v.LastLockoutDate == LastLockoutDate))) && (LastPasswordChangedDate.HasValue && (v.LastPasswordChangedDate == LastPasswordChangedDate))) && (LastLoginDate.HasValue && (v.LastLoginDate == LastLoginDate))) && (CreateDate.HasValue && (v.CreateDate == CreateDate))) && (IsLockedOut.HasValue && (v.IsLockedOut == IsLockedOut))) && (IsApproved.HasValue && (v.IsApproved == IsApproved))) && (PasswordFormat.HasValue && (v.PasswordFormat == PasswordFormat))) && (UserId.HasValue && (v.UserId == UserId))));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> vw_aspnet_MembershipUsers_All()
        {
            global::System.Linq.IQueryable<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser> query;
            query = base.CreateQuery<global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser>("[vw_aspnet_MembershipUsers]").AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::Marketing_CraigslistScraperData.Implementation.City))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.City();
            }
            if (type == typeof(global::Marketing_CraigslistScraperData.Implementation.UserCity))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.UserCity();
            }
            if (type == typeof(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext CreateObjectContext()
        {
            return new global::Marketing_CraigslistScraperData.Implementation.Marketing_CraigslistScraperDataObjectContext(base.GetEntityConnectionString(
                "Marketing_CraigslistScraperData", 
                "res://*/Marketing_CraigslistScraperData.csdl|res://*/Marketing_CraigslistScraperData.ssdl|res://*/Marketing_CraigslistScraperData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.City))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.City();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.UserCity))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.UserCity();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.vw_aspnet_MembershipUser))
            {
                return new global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser();
            }
            return null;
        }
    
    #endregion
    
    }
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext>
    {
    
        public MarketingDomainServiceDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region UserCitySelection
    
        public void InsertUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.UserCitySelections.AddObject(entity);
            }
        }
    
        public void UpdateUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.UserCitySelections, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteUserCitySelection(global::MarketingDomainServiceData.Implementation.UserCitySelection entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.UserCitySelections.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelectionsForUser(string frameworkOperators, global::System.Nullable<global::System.Guid> userId)
        {
            return this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("GetUserCitySelectionsForUser", frameworkOperators, userId);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().MarketingDomainServiceData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketingDomainServiceDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.RiaDataServiceImplementation<global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext, global::Marketing.Services.MarketingDomainService>
    {
        public MarketingDomainServiceDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("UserCitySelections_All"),
                (u) => (Id.HasValue && (u.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> UserCitySelections_All()
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("DefaultUserCitySelections").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> GetUserCitySelectionsForUser(global::System.Nullable<global::System.Guid> userId)
        {
            global::System.Linq.IQueryable<global::MarketingDomainServiceData.Implementation.UserCitySelection> query;
            query = base.CreateQuery<global::MarketingDomainServiceData.Implementation.UserCitySelection>("GetUserCitySelectionsForUser", userId).AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserCitySelection();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext CreateObjectContext()
        {
            return new global::MarketingDomainServiceData.Implementation.MarketingDomainServiceDataObjectContext(base.GetEntityConnectionString(
                "MarketingDomainServiceData", 
                "res://*/MarketingDomainServiceData.csdl|res://*/MarketingDomainServiceData.ssdl|res://*/MarketingDomainServiceData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.UserCitySelection))
            {
                return new global::MarketingDomainServiceData.Implementation.UserCitySelection();
            }
            return null;
        }
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection))
            {
                return typeof(global::Marketing.Services.UserCitySelection);
            }
            return base.ConvertType(outerType);
        }
        protected override object ConvertEntity(object outerEntity)
        {
            global::MarketingDomainServiceData.Implementation.UserCitySelection userCitySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserCitySelection;
            if (userCitySelection != null)
            {
                global::Marketing.Services.UserCitySelection result = new global::Marketing.Services.UserCitySelection();
                result.Id = userCitySelection.Id;
                result.Selected = userCitySelection.Selected;
                result.CityId = userCitySelection.CityId;
                result.UserId = userCitySelection.UserId;
                result.CityName = userCitySelection.CityName;
                result.RegionName = userCitySelection.RegionName;
                result.Active = userCitySelection.Active;
                return result;
            }
            return null;
        }
       
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::MarketingDomainServiceData.Implementation.UserCitySelection outerUserCitySelection = outerEntity as global::MarketingDomainServiceData.Implementation.UserCitySelection;
            global::Marketing.Services.UserCitySelection innerUserCitySelection = innerResult as global::Marketing.Services.UserCitySelection;
            if ((outerUserCitySelection != null) && (innerUserCitySelection != null))
            {
                outerUserCitySelection.Id = innerUserCitySelection.Id;
                outerUserCitySelection.Selected = innerUserCitySelection.Selected;
                outerUserCitySelection.CityId = innerUserCitySelection.CityId;
                outerUserCitySelection.UserId = innerUserCitySelection.UserId;
                outerUserCitySelection.CityName = innerUserCitySelection.CityName;
                outerUserCitySelection.RegionName = innerUserCitySelection.RegionName;
                outerUserCitySelection.Active = innerUserCitySelection.Active;
                return;
            }
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.Marketing_CraigslistScraperData))
            {
                return new global::LightSwitchApplication.Marketing_CraigslistScraperDataService();
            }
            if (dataServiceType == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.MarketingDomainServiceDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.Marketing_CraigslistScraperData))
            {
                return new global::LightSwitchApplication.Implementation.Marketing_CraigslistScraperDataServiceImplementation(dataService);
            }
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.MarketingDomainServiceData))
            {
                return new global::LightSwitchApplication.Implementation.MarketingDomainServiceDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.City) == definitionType)
            {
                return typeof(global::Marketing_CraigslistScraperData.Implementation.City);
            }
            if (typeof(global::LightSwitchApplication.UserCity) == definitionType)
            {
                return typeof(global::Marketing_CraigslistScraperData.Implementation.UserCity);
            }
            if (typeof(global::LightSwitchApplication.vw_aspnet_MembershipUser) == definitionType)
            {
                return typeof(global::Marketing_CraigslistScraperData.Implementation.vw_aspnet_MembershipUser);
            }
            if (typeof(global::LightSwitchApplication.UserCitySelection) == definitionType)
            {
                return typeof(global::MarketingDomainServiceData.Implementation.UserCitySelection);
            }
            return null;
        }
    }
}

namespace Marketing_CraigslistScraperData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class City :
        global::LightSwitchApplication.City.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserCity :
        global::LightSwitchApplication.UserCity.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class vw_aspnet_MembershipUser :
        global::LightSwitchApplication.vw_aspnet_MembershipUser.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

namespace MarketingDomainServiceData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class UserCitySelection :
        global::LightSwitchApplication.UserCitySelection.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

