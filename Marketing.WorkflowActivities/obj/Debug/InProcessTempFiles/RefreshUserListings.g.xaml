<?xml version="1.0" encoding="utf-8"?>
<local:RefreshUserListings mva:VisualBasic.Settings="Assembly references and imported namespaces for internal implementation" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cn="clr-namespace:Common.Net;assembly=Common.Net" xmlns:cni="clr-namespace:Common.Net.Interfaces;assembly=Common.Net.Interfaces" xmlns:local="clr-namespace:Marketing.WorkflowActivities;assembly=Marketing.WorkflowActivities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:md="clr-namespace:Marketing.Data;assembly=Marketing.Data" xmlns:mue="clr-namespace:Marketing.Utils.Extensions;assembly=Marketing.Utils" xmlns:mv="clr-namespace:Microsoft.VisualBasic;assembly=System" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:s1="clr-namespace:System;assembly=System" xmlns:s2="clr-namespace:System;assembly=System.Xml" xmlns:s3="clr-namespace:System;assembly=System.Core" xmlns:s4="clr-namespace:System;assembly=System.ServiceModel" xmlns:sa="clr-namespace:System.Activities;assembly=System.Activities" xmlns:sad="clr-namespace:System.Activities.Debugger;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel" xmlns:scg2="clr-namespace:System.Collections.Generic;assembly=System.Core" xmlns:scg3="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:sdo="clr-namespace:System.Data.Objects;assembly=System.Data.Entity" xmlns:sdod="clr-namespace:System.Data.Objects.DataClasses;assembly=System.Data.Entity" xmlns:sl="clr-namespace:System.Linq;assembly=System.Core" xmlns:st="clr-namespace:System.Text;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <local:RefreshUserListings.Implementation>
    <Flowchart sad:XamlDebuggerXmlReader.FileName="C:\Projects\Urbana\Marketing\Marketing.WorkflowActivities\RefreshUserListings.xaml">
      <Flowchart.Variables>
        <Variable x:TypeArguments="scg3:List(x:String)" Name="listingUrls" />
        <Variable x:TypeArguments="md:MarketingEntities" Default="[New MarketingEntities]" Name="domainContext" />
        <Variable x:TypeArguments="cn:HttpPost" Default="[New HttpPost]" Name="postSubmitter" />
        <Variable x:TypeArguments="s:Byte[]" Name="rawResponse" />
        <Variable x:TypeArguments="s:Guid" Name="myGuid" />
        <Variable x:TypeArguments="scg3:List(x:String)" Name="userListingCategoryUrls" />
      </Flowchart.Variables>
      <Flowchart.StartNode>
        <FlowStep x:Name="__ReferenceID1">
          <InvokeMethod DisplayName="Get Category Urls for User" MethodName="GetUrlsForUser" TargetType="local:DataHelper">
            <InvokeMethod.Result>
              <OutArgument x:TypeArguments="scg3:List(x:String)">[userListingCategoryUrls]</OutArgument>
            </InvokeMethod.Result>
            <InArgument x:TypeArguments="md:MarketingEntities">[domainContext]</InArgument>
            <InArgument x:TypeArguments="s:Guid">[UserId]</InArgument>
          </InvokeMethod>
          <FlowStep.Next>
            <FlowStep x:Name="__ReferenceID0">
              <ForEach x:TypeArguments="x:String" DisplayName="For Each UserListingCategory" Values="[userListingCategoryUrls]">
                <ActivityAction x:TypeArguments="x:String">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                  </ActivityAction.Argument>
                  <TryCatch>
                    <TryCatch.Try>
                      <Sequence DisplayName="Refresh Listings">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:String" Name="postUrlsResponse" />
                          <Variable x:TypeArguments="x:String" Name="responseString" />
                        </Sequence.Variables>
                        <local:GetListingUrlsActivity ListingPageUrl="[item]" Result="[listingUrls]" />
                        <ForEach x:TypeArguments="x:String" DisplayName="ForEach&lt;String&gt;" Values="[listingUrls]">
                          <ActivityAction x:TypeArguments="x:String">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="x:String" Name="url" />
                            </ActivityAction.Argument>
                            <Sequence DisplayName="Process Url">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="md:ListingUrl" Name="listingUrl" />
                                <Variable x:TypeArguments="md:UserListingUrl" Name="userListingUrl" />
                              </Sequence.Variables>
                              <Assign>
                                <Assign.To>
                                  <OutArgument x:TypeArguments="md:ListingUrl">[listingUrl]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="md:ListingUrl">[domainContext.ListingUrls.SingleOrDefault(Function(n) n.Url = url)]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[listingUrl Is Nothing]" DisplayName="If ListingUrl Does Not Exist">
                                <If.Then>
                                  <Sequence DisplayName="Save Listing Url">
                                    <Assign DisplayName="Assign New Listing Url">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="md:ListingUrl">[listingUrl]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="md:ListingUrl">[New ListingUrl With {.Id=Guid.NewGuid, .Url=url, .Created = System.DateTime.Now }]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <InvokeMethod DisplayName="Add ListingUrl To Context" MethodName="AddObject">
                                      <InvokeMethod.TargetObject>
                                        <InArgument x:TypeArguments="sdo:ObjectSet(md:ListingUrl)">[domainContext.ListingUrls]</InArgument>
                                      </InvokeMethod.TargetObject>
                                      <InArgument x:TypeArguments="md:ListingUrl">[listingUrl]</InArgument>
                                    </InvokeMethod>
                                  </Sequence>
                                </If.Then>
                              </If>
                              <Assign DisplayName="Assign UserListingUrl">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="md:UserListingUrl">[userListingUrl]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="md:UserListingUrl">[domainContext.UserListingUrls.SingleOrDefault(Function(n) n.UserId = UserId And n.ListingUrlId = listingUrl.Id)]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[userListingUrl Is Nothing]" DisplayName="If UserListingUrl Does Not Exist">
                                <If.Then>
                                  <Sequence DisplayName="Sequence">
                                    <Assign DisplayName="Assign New UserListingUrl">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="md:UserListingUrl">[userListingUrl]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="md:UserListingUrl">[New UserListingUrl With {.Id=Guid.NewGuid, .ListingUrlId=listingUrl.Id, .Created=System.DateTime.Now, .UserId=UserId }]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <InvokeMethod DisplayName="Add New UserListingUrl To Context" MethodName="AddObject">
                                      <InvokeMethod.TargetObject>
                                        <InArgument x:TypeArguments="sdo:ObjectSet(md:UserListingUrl)">[domainContext.UserListingUrls]</InArgument>
                                      </InvokeMethod.TargetObject>
                                      <InArgument x:TypeArguments="md:UserListingUrl">[userListingUrl]</InArgument>
                                    </InvokeMethod>
                                    <InvokeMethod DisplayName="Save Context Changes" MethodName="SaveChanges">
                                      <InvokeMethod.TargetObject>
                                        <InArgument x:TypeArguments="md:MarketingEntities">[domainContext]</InArgument>
                                      </InvokeMethod.TargetObject>
                                    </InvokeMethod>
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </ActivityAction>
                        </ForEach>
                      </Sequence>
                    </TryCatch.Try>
                    <TryCatch.Catches>
                      <Catch x:TypeArguments="s:Exception">
                        <ActivityAction x:TypeArguments="s:Exception">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                          </ActivityAction.Argument>
                        </ActivityAction>
                      </Catch>
                    </TryCatch.Catches>
                  </TryCatch>
                </ActivityAction>
              </ForEach>
            </FlowStep>
          </FlowStep.Next>
        </FlowStep>
      </Flowchart.StartNode>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID1</x:Reference>
    </Flowchart>
  </local:RefreshUserListings.Implementation>
</local:RefreshUserListings>