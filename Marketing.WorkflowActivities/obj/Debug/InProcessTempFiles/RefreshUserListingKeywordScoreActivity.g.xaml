<?xml version="1.0" encoding="utf-8"?>
<local:RefreshUserListingKeywordScoreActivity mva:VisualBasic.Settings="Assembly references and imported namespaces for internal implementation" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:Marketing.WorkflowActivities;assembly=Marketing.WorkflowActivities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:md="clr-namespace:Marketing.Data;assembly=Marketing.Data" xmlns:mpel="clr-namespace:Microsoft.Practices.EnterpriseLibrary.Logging;assembly=Microsoft.Practices.EnterpriseLibrary.Logging" xmlns:mv="clr-namespace:Microsoft.VisualBasic;assembly=System" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:s1="clr-namespace:System;assembly=System" xmlns:s2="clr-namespace:System;assembly=System.Xml" xmlns:s3="clr-namespace:System;assembly=System.Core" xmlns:s4="clr-namespace:System;assembly=System.ServiceModel" xmlns:sa="clr-namespace:System.Activities;assembly=System.Activities" xmlns:sad="clr-namespace:System.Activities.Debugger;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System" xmlns:scg1="clr-namespace:System.Collections.Generic;assembly=System.ServiceModel" xmlns:scg2="clr-namespace:System.Collections.Generic;assembly=System.Core" xmlns:scg3="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:sdo="clr-namespace:System.Data.Objects;assembly=System.Data.Entity" xmlns:sdod="clr-namespace:System.Data.Objects.DataClasses;assembly=System.Data.Entity" xmlns:sl="clr-namespace:System.Linq;assembly=System.Core" xmlns:st="clr-namespace:System.Text;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <local:RefreshUserListingKeywordScoreActivity.Implementation>
    <Flowchart sad:XamlDebuggerXmlReader.FileName="C:\Projects\Urbana\Marketing\Marketing.WorkflowActivities\RefreshUserListingKeywordScoreActivity.xaml">
      <Flowchart.Variables>
        <Variable x:TypeArguments="md:MarketingEntities" Default="[New MarketingEntities]" Name="context" />
        <Variable x:TypeArguments="scg3:List(md:UserKeyword)" Name="userKeywords" />
      </Flowchart.Variables>
      <Flowchart.StartNode>
        <FlowStep x:Name="__ReferenceID0">
          <Sequence DisplayName="Refresh User Listing Keyowrd Score Sequence">
            <Sequence.Variables>
              <Variable x:TypeArguments="scg3:List(md:UserListingData)" Name="userListingDatas" />
              <Variable x:TypeArguments="scg3:List(md:UserListingKeywordScore)" Name="userListingKeywordScores" />
            </Sequence.Variables>
            <InvokeMethod DisplayName="InvokeMethod GetUserKeywords" MethodName="GetUserKeywordsForUser" TargetType="local:DataHelper">
              <InvokeMethod.Result>
                <OutArgument x:TypeArguments="scg3:List(md:UserKeyword)">[userKeywords]</OutArgument>
              </InvokeMethod.Result>
              <InArgument x:TypeArguments="md:MarketingEntities">[context]</InArgument>
              <InArgument x:TypeArguments="s:Guid">[UserId]</InArgument>
            </InvokeMethod>
            <InvokeMethod DisplayName="InvokeMethod GetUserListingDatasForUser" MethodName="GetUserListingDatasForUser" TargetType="local:DataHelper">
              <InvokeMethod.Result>
                <OutArgument x:TypeArguments="scg3:List(md:UserListingData)">[userListingDatas]</OutArgument>
              </InvokeMethod.Result>
              <InArgument x:TypeArguments="md:MarketingEntities">[context]</InArgument>
              <InArgument x:TypeArguments="s:Guid">[UserId]</InArgument>
            </InvokeMethod>
            <InvokeMethod DisplayName="InvokeMethod GetUserListingKeywordScoresForUser" MethodName="GetUserListingKeywordScoresForUser" TargetType="local:DataHelper">
              <InvokeMethod.Result>
                <OutArgument x:TypeArguments="scg3:List(md:UserListingKeywordScore)">[userListingKeywordScores]</OutArgument>
              </InvokeMethod.Result>
              <InArgument x:TypeArguments="md:MarketingEntities">[context]</InArgument>
              <InArgument x:TypeArguments="s:Guid">[UserId]</InArgument>
            </InvokeMethod>
            <ForEach x:TypeArguments="md:UserListingData" DisplayName="ForEach&lt;UserListingData&gt;" Values="[userListingDatas]">
              <ActivityAction x:TypeArguments="md:UserListingData">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="md:UserListingData" Name="item" />
                </ActivityAction.Argument>
                <TryCatch>
                  <TryCatch.Try>
                    <Sequence DisplayName="Refresh Keyword Score Sequence">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="x:Int32" Name="keywordScore" />
                        <Variable x:TypeArguments="scg3:List(x:String)" Default="[New List(Of String)]" Name="keywordDisplay" />
                      </Sequence.Variables>
                      <ForEach x:TypeArguments="md:UserKeyword" DisplayName="ForEach&lt;UserKeyword&gt;" Values="[userKeywords]">
                        <ActivityAction x:TypeArguments="md:UserKeyword">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="md:UserKeyword" Name="userKeyword" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Compute Score Sequence">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="x:String" Default="[item.PostContent.ToLower]" Name="postContent" />
                            </Sequence.Variables>
                            <If Condition="[postContent.Contains(userKeyword.Keyword.ToLower())]" DisplayName="If Content Contains Score">
                              <If.Then>
                                <Sequence>
                                  <Assign DisplayName="Assign Incremented Score">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="x:Int32">[keywordScore]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="x:Int32">[keywordScore + userKeyword.WeightedScore]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <InvokeMethod DisplayName="InvokeMethod Add Keyword Display" MethodName="Add">
                                    <InvokeMethod.TargetObject>
                                      <InArgument x:TypeArguments="scg3:List(x:String)">[keywordDisplay]</InArgument>
                                    </InvokeMethod.TargetObject>
                                    <InArgument x:TypeArguments="x:String">[userKeyword.Keyword]</InArgument>
                                  </InvokeMethod>
                                </Sequence>
                              </If.Then>
                            </If>
                          </Sequence>
                        </ActivityAction>
                      </ForEach>
                      <Sequence DisplayName="Update UserKeywordScore Sequence">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="md:UserListingKeywordScore" Name="userListingKeywordScore" />
                        </Sequence.Variables>
                        <Assign DisplayName="Assign UserListingKeywordScore Item">
                          <Assign.To>
                            <OutArgument x:TypeArguments="md:UserListingKeywordScore">[userListingKeywordScore]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="md:UserListingKeywordScore">[userListingKeywordScores.SingleOrDefault(Function(n) n.UserListingId = item.UserListingUrlId)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <If Condition="[userListingKeywordScore Is Nothing]" DisplayName="If New Entry">
                          <If.Then>
                            <Sequence DisplayName="Insert Sequence">
                              <Assign DisplayName="Assign New UserListingKeywordScore">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="md:UserListingKeywordScore">[userListingKeywordScore]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="md:UserListingKeywordScore">[New UserListingKeywordScore With {.Id=Guid.NewGuid(), .UserId=UserId, .UserListingId = item.UserListingUrlId, .KeywordScore = keywordScore}]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <InvokeMethod DisplayName="InvokeMethod Add To Context" MethodName="AddObject">
                                <InvokeMethod.TargetObject>
                                  <InArgument x:TypeArguments="sdo:ObjectSet(md:UserListingKeywordScore)">[context.UserListingKeywordScores]</InArgument>
                                </InvokeMethod.TargetObject>
                                <InArgument x:TypeArguments="md:UserListingKeywordScore">[userListingKeywordScore]</InArgument>
                              </InvokeMethod>
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence DisplayName="Update Sequence">
                              <Assign DisplayName="Assign Updated Value">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Int32">[userListingKeywordScore.KeywordScore]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Int32">[keywordScore]</InArgument>
                                </Assign.Value>
                              </Assign>
                            </Sequence>
                          </If.Else>
                        </If>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[userListingKeywordScore.KeywordDisplay]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[String.Join(",",keywordDisplay)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <InvokeMethod DisplayName="InvokeMethod Save Changes" MethodName="SaveChanges">
                          <InvokeMethod.TargetObject>
                            <InArgument x:TypeArguments="md:MarketingEntities">[context]</InArgument>
                          </InvokeMethod.TargetObject>
                        </InvokeMethod>
                      </Sequence>
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception">
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                        </ActivityAction.Argument>
                        <InvokeMethod DisplayName="Invoke Logging" MethodName="Write" TargetType="mpel:Logger">
                          <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                        </InvokeMethod>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </ActivityAction>
            </ForEach>
          </Sequence>
        </FlowStep>
      </Flowchart.StartNode>
      <x:Reference>__ReferenceID0</x:Reference>
    </Flowchart>
  </local:RefreshUserListingKeywordScoreActivity.Implementation>
</local:RefreshUserListingKeywordScoreActivity>